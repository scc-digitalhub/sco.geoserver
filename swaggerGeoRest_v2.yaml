swagger: '2.0'
info:
  version: 1.0.0
  title: GeoServer Data Stores
  description: >-
    A data store contains vector format spatial data. It can be a file (such as
    a shapefile), a database (such as PostGIS), or a server (such as a remote
    Web Feature Service).
paths:
  '/workspaces/{workspaceName}/datastores':
    get:
      operationId: getDatastores
      summary: Get a list of data stores
      description: >-
        List all data stores in workspace ws. Use the "Accept:" header to
        specify format or append an extension to the endpoint (example
        "/datastores.xml" for XML)
      produces:
        - application/xml
        - application/json
        - text/html
      parameters:
        - name: workspaceName
          in: path
          required: true
          type: string
          description: The name of the worskpace containing the data stores.
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/dataStoreResponse'
          examples:
            application/xml: |
              <dataStore>
                <name>sf</name>
                <atom:link xmlns:atom="http://www.w3.org/2005/Atom" rel="alternate" href="http://localhost:8080/geoserver/rest/workspaces/sf/datastores/sf.xml" type="application/xml"/>
              </dataStore>
            application/json: >
              {"dataStores":{"dataStore":[{"name":"sf","href":"http://localhost:8080/geoserver/rest/workspaces/sf/datastores/sf.json"}]}}
    post:
      operationId: postDatastores
      summary: Create a new data store
      description: Adds a new data store to the workspace.
      parameters:
        - name: workspaceName
          in: path
          type: string
          required: true
          description: The name of the worskpace containing the data stores.
        - $ref: '#/parameters/dataStorePost'
      consumes:
        - application/xml
        - application/json
      produces:
        - application/xml
        - application/json
        - text/html
      responses:
        '201':
          description: Created
          schema:
            type: string
          headers:
            Location:
              description: URL where the newly created data store can be found
              type: string
  '/workspaces/{workspaceName}/datastores/{storeName}':
    get:
      operationId: getDataStore
      summary: Retrieve a particular data store from a workspace
      description: >-
        Controls a particular data store in a given workspace. Use the "Accept:"
        header to specify format or append an extension to the endpoint (example
        "/datastores/{datastore}.xml" for XML).
      produces:
        - application/xml
        - application/json
        - text/html
      parameters:
        - name: workspaceName
          in: path
          type: string
          required: true
          description: The name of the worskpace containing the data store.
        - name: storeName
          in: path
          required: true
          description: The name of the data store to retrieve.
          type: string
        - name: quietOnNotFound
          in: query
          required: false
          description: >-
            The quietOnNotFound parameter avoids logging an exception when the
            data store is not present. Note that 404 status code will still be
            returned.
          type: boolean
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/datastore'
          examples:
            application/xml: |
              <dataStore>
                <name>sf</name>
                <enabled>true</enabled>
                <workspace>
                  <name>sf</name>
                  <atom:link xmlns:atom="http://www.w3.org/2005/Atom" rel="alternate" href="http://localhost:8080/geoserver/rest/workspaces/sf.xml" type="application/xml"/>
                </workspace>
                <connectionParameters>
                  <entry key="url">file:data/sf</entry>
                  <entry key="namespace">http://www.openplans.org/spearfish</entry>
                </connectionParameters>
                <__default>false</__default>
                <featureTypes>
                  <atom:link xmlns:atom="http://www.w3.org/2005/Atom" rel="alternate" href="http://localhost:8080/geoserver/rest/workspaces/sf/datastores/sf/featuretypes.xml" type="application/xml"/>
                </featureTypes>
              </dataStore>
            application/json: >
              {"dataStore":{"name":"sf","enabled":true,"workspace":{"name":"sf","href":"http://localhost:8080/geoserver/rest/workspaces/sf.json"},"connectionParameters":{"entry":[{"@key":"url","$":"file:data/sf"},{"@key":"namespace","$":"http://www.openplans.org/spearfish"}]},"_default":false,"featureTypes":"http://localhost:8080/geoserver/rest/workspaces/sf/datastores/sf/featuretypes.json"}}
    put:
      operationId: putDatastore
      summary: Modify a data store.
      description: >-
        Modify data store ds. Use the "Accept:" header to specify format or
        append an extension to the endpoint (example "/datastores/{ds}.xml" for
        XML).
      parameters:
        - name: workspaceName
          in: path
          type: string
          required: true
          description: The name of the worskpace containing the data store.
        - name: storeName
          in: path
          required: true
          description: The name of the data store to modify.
          type: string
        - $ref: '#/parameters/dataStorePut'
      consumes:
        - application/xml
        - application/json
      responses:
        '200':
          description: The data store was successfully updated.
    delete:
      operationId: deleteDatastore
      summary: Delete data store
      description: Deletes a data store from the server.
      parameters:
        - name: workspaceName
          in: path
          type: string
          required: true
          description: The name of the worskpace containing the data store.
        - name: storeName
          in: path
          required: true
          description: The name of the data store to delete.
          type: string
        - name: recurse
          in: query
          required: false
          description: >-
            The recurse controls recursive deletion. When set to true all
            resources contained in the store are also removed. The default value
            is "false".
          type: boolean
      responses:
        '200':
          description: OK
  '/workspaces/{workspaceName}/datastores/{storeName}/{method}.{format}':
    get:
      operationId: getDataStoreUpload
      description: >-
        Deprecated. Retrieve the underlying files for the data store as a zip
        file with MIME type application/zip
      parameters:
        - name: workspaceName
          in: path
          required: true
          description: The name of the worskpace containing the data store.
          type: string
        - name: storeName
          in: path
          required: true
          description: The name of the store to be retrieved
          type: string
        - name: method
          in: path
          required: true
          description: 'The upload method. Can be "url", "file", "external". Unused for GET'
          type: string
        - name: format
          in: path
          required: true
          description: 'The type of source data store (e.g., "shp"). Unused for GET'
          type: string
      responses:
        '200':
          description: OK
    put:
      operationId: putDataStoreUpload
      summary: 'Uploads files to the data store, creating it if necessary'
      description: >-
        Creates or modifies a single data store by uploading spatial data or
        mapping configuration (in case an app-schema data store is targeted)
        files.
      parameters:
        - name: workspaceName
          in: path
          required: true
          description: The name of the worskpace containing the coverage stores.
          type: string
        - name: storeName
          in: path
          required: true
          description: The name of the store to be retrieved
          type: string
        - name: method
          in: path
          required: true
          description: >-
            The upload method. Can be "url", "file", "external". "file" uploads
            a file from a local source. The body of the request is the file
            itself. "url" uploads a file from an remote source. The body of the
            request is a URL pointing to the file to upload. This URL must be
            visible from the server. "external" uses an existing file on the
            server. The body of the request is the absolute path to the existing
            file.
          type: string
        - name: format
          in: path
          required: true
          description: 'The type of source data store (e.g., "shp").'
          type: string
        - name: configure
          in: query
          required: false
          description: >-
            The configure parameter controls if a coverage/layer are configured
            upon file upload, in addition to creating the store. It can have a
            value of "none" to avoid configuring coverages.
          type: string
        - name: target
          in: query
          required: false
          description: >-
            The type of target data store (e.g., "shp"). Same as format if not
            provided.
          type: string
        - name: update
          in: query
          required: false
          description: >-
            The update mode. If "overwrite", will overwrite existing data.
            Otherwise, will append to existing data.
          type: string
        - name: charset
          in: query
          required: false
          description: The character set of the data.
          type: string
        - name: filename
          in: query
          required: false
          description: >-
            The filename parameter specifies the target file name for the file
            to be uploaded. This is important to avoid clashes with existing
            files.
          type: string
      responses:
        '200':
          description: The data store was successfully updated.
  '/workspaces/{workspace}/coveragestores/{store}/coverages':
    get:
      operationId: getWorkspaceCoverageStore
      description: |
        Get the coverages available for the provided workspace and data store.
      parameters:
        - name: workspace
          in: path
          description: The name of the workspace
          required: true
          type: string
        - name: store
          in: path
          description: The name of the coverage data store
          required: true
          type: string
        - name: list
          description: >
            If the list parameter value is equal to "all" all the coverages
            available in the data source (even the non published ones) will be
            returned.
          in: query
          required: false
          type: string
          enum:
            - all
      produces:
        - text/html
        - application/xml
        - application/json
      responses:
        '200':
          description: Successful response containing the list of coverages.
          schema:
            type: object
            properties:
              coverages:
                type: object
                properties:
                  coverage:
                    type: array
                    items:
                      type: object
                      properties:
                        name:
                          type: string
                          description: The Name
                        link:
                          type: string
                          description: The URL
          examples:
            application/json: |
              {
                "coverages": {
                  "coverage": [
                    {
                      "name": "sfdem",
                      "href": "http://localhost:/geoserver/restng/workspaces/sf/coverages/sfdem.json"
                    }
                  ]
                }
              }
            text/xml: |
              <coverages>
                <coverage>
                  <name>sfdem</name>
                  <atom:link xmlns:atom="http://www.w3.org/2005/Atom" rel="alternate" href="http://localhost:/geoserver/restng/workspaces/sf/coverages/sfdem.xml" type="application/atom+xml"/>
                </coverage>
              </coverages>
    post:
      operationId: postWorkspaceCoverageStore
      description: |
        Create a new coverage, the underlying data store must exists.
      parameters:
        - name: workspace
          in: path
          description: The name of the workspace
          required: true
          type: string
        - name: store
          in: path
          description: The name of the coverage data store
          required: true
          type: string
        - name: coverage
          in: body
          description: The body of the coverage to POST
          required: true
          schema:
            $ref: '#/definitions/CoverageInfo'
      responses:
        '201':
          description: The coverage was successfully created.
          headers:
            Location:
              description: The location of the newly created coverage.
              type: string
  '/workspaces/{workspace}/coverages':
    get:
      operationId: getCoverages
      description: |
        Get the coverages available for the provided workspace.
      parameters:
        - name: workspace
          in: path
          description: The name of the workspace
          required: true
          type: string
        - name: list
          description: >
            If the list parameter value is equal to "all" all the coverages
            available in the data source (even the non published ones) will be
            returned.
          in: query
          required: false
          type: string
          enum:
            - all
      produces:
        - text/html
        - application/xml
        - application/json
      responses:
        '200':
          description: Successful response containing the list of coverages.
          schema:
            type: object
            properties:
              coverages:
                type: object
                properties:
                  coverage:
                    type: array
                    items:
                      type: object
                      properties:
                        name:
                          type: string
                          description: The Name
                        link:
                          type: string
                          description: The URL
          examples:
            application/json: |
              {
                "coverages": {
                  "coverage": [
                    {
                      "name": "sfdem",
                      "href": "http://localhost:/geoserver/restng/workspaces/sf/coverages/sfdem.json"
                    }
                  ]
                }
              }
            text/xml: |
              <coverages>
                <coverage>
                  <name>sfdem</name>
                  <atom:link xmlns:atom="http://www.w3.org/2005/Atom" rel="alternate" href="http://localhost:/geoserver/restng/workspaces/sf/coverages/sfdem.xml" type="application/atom+xml"/>
                </coverage>
              </coverages>
    post:
      operationId: postCoverageStore
      description: >
        Create a new coverage, the coverage definition needs to reference a
        store.
      parameters:
        - name: workspace
          in: path
          description: The name of the workspace
          required: true
          type: string
        - name: coverage
          in: body
          description: The body of the coverage to POST
          required: true
          schema:
            $ref: '#/definitions/CoverageInfo'
      responses:
        '201':
          description: The coverage was successfully created.
          headers:
            Location:
              description: The location of the newly created coverage.
              type: string
  '/workspaces/{workspace}/coverages/{coverage}':
    get:
      operationId: getCoverage
      description: Get an individual coverage.
      produces:
        - text/html
        - application/xml
        - application/json
      parameters:
        - name: workspace
          in: path
          description: The name of the workspace
          required: true
          type: string
        - name: coverage
          in: path
          description: The name of the coverage
          required: true
          type: string
        - name: quietOnNotFound
          in: query
          description: >-
            The quietOnNotFound parameter avoids to log an Exception when the
            coverage is not present. Note that 404 status code will be returned
            anyway.
          type: boolean
          required: false
          default: false
      responses:
        '200':
          description: Succesful response containing coverage
          schema:
            type: object
            properties:
              featureType:
                $ref: '#/definitions/CoverageInfo'
          examples:
            application/json: |
              {
                  "coverage": {
                      "abstract": "Digital elevation model for the Spearfish region.\r\n\r\nsfdem is a Tagged Image File Format with Geographic information",
                      "defaultInterpolationMethod": "nearest neighbor",
                      "description": "Generated from sfdem",
                      "dimensions": {
                          "coverageDimension": [
                              {
                                  "description": "GridSampleDimension[-9.999999933815813E36,-9.999999933815813E36]",
                                  "name": "GRAY_INDEX",
                                  "range": {
                                      "max": -9.999999933815813e+36,
                                      "min": -9.999999933815813e+36
                                  }
                              }
                          ]
                      },
                      "enabled": true,
                      "grid": {
                          "@dimension": "2",
                          "crs": "EPSG:26713",
                          "range": {
                              "high": "634 477",
                              "low": "0 0"
                          },
                          "transform": {
                              "scaleX": 30,
                              "scaleY": -30,
                              "shearX": 0,
                              "shearY": 0,
                              "translateX": 589995,
                              "translateY": 4927995
                          }
                      },
                      "interpolationMethods": {
                          "string": [
                              "nearest neighbor",
                              "bilinear",
                              "bicubic"
                          ]
                      },
                      "keywords": {
                          "string": [
                              "WCS",
                              "sfdem",
                              "sfdem"
                          ]
                      },
                      "latLonBoundingBox": {
                          "crs": "EPSG:4326",
                          "maxx": -103.62940739432703,
                          "maxy": 44.5016011535299,
                          "minx": -103.87108701853181,
                          "miny": 44.370187074132616
                      },
                      "metadata": {
                          "entry": {
                              "$": "sfdem_sfdem",
                              "@key": "dirName"
                          }
                      },
                      "name": "sfdem",
                      "namespace": {
                          "href": "http://localhost:/geoserver/restng/namespaces/sf.json",
                          "name": "sf"
                      },
                      "nativeBoundingBox": {
                          "crs": {
                              "$": "EPSG:26713",
                              "@class": "projected"
                          },
                          "maxx": 609000,
                          "maxy": 4928010,
                          "minx": 589980,
                          "miny": 4913700
                      },
                      "nativeCRS": {
                          "$": "PROJCS[\"NAD27 / UTM zone 13N\", \n  GEOGCS[\"NAD27\", \n    DATUM[\"North American Datum 1927\", \n      SPHEROID[\"Clarke 1866\", 6378206.4, 294.9786982138982, AUTHORITY[\"EPSG\",\"7008\"]], \n      TOWGS84[2.478, 149.752, 197.726, 0.526, -0.498, 0.501, 0.685], \n      AUTHORITY[\"EPSG\",\"6267\"]], \n    PRIMEM[\"Greenwich\", 0.0, AUTHORITY[\"EPSG\",\"8901\"]], \n    UNIT[\"degree\", 0.017453292519943295], \n    AXIS[\"Geodetic longitude\", EAST], \n    AXIS[\"Geodetic latitude\", NORTH], \n    AUTHORITY[\"EPSG\",\"4267\"]], \n  PROJECTION[\"Transverse_Mercator\"], \n  PARAMETER[\"central_meridian\", -105.0], \n  PARAMETER[\"latitude_of_origin\", 0.0], \n  PARAMETER[\"scale_factor\", 0.9996], \n  PARAMETER[\"false_easting\", 500000.0], \n  PARAMETER[\"false_northing\", 0.0], \n  UNIT[\"m\", 1.0], \n  AXIS[\"Easting\", EAST], \n  AXIS[\"Northing\", NORTH], \n  AUTHORITY[\"EPSG\",\"26713\"]]",
                          "@class": "projected"
                      },
                      "nativeFormat": "GeoTIFF",
                      "nativeName": "sfdem",
                      "requestSRS": {
                          "string": [
                              "EPSG:26713"
                          ]
                      },
                      "responseSRS": {
                          "string": [
                              "EPSG:26713"
                          ]
                      },
                      "srs": "EPSG:26713",
                      "store": {
                          "@class": "coverageStore",
                          "href": "http://localhost:/geoserver/restng/workspaces/sf/coveragestores/sfdem.json",
                          "name": "sf:sfdem"
                      },
                      "supportedFormats": {
                          "string": [
                              "ARCGRID",
                              "IMAGEMOSAIC",
                              "GTOPO30",
                              "GEOTIFF",
                              "GIF",
                              "PNG",
                              "JPEG",
                              "TIFF"
                          ]
                      },
                      "title": "Spearfish elevation"
                  }
              }
            application/xml: >
              <coverage>
                <name>sfdem</name>
                <nativeName>sfdem</nativeName>
                <namespace>
                  <name>sf</name>
                  <atom:link href="http://localhost:8080/geoserver/restng/namespaces/sf.xml" rel="alternate" type="application/atom+xml" xmlns:atom="http://www.w3.org/2005/Atom"/>
                </namespace>
                <title>Spearfish elevation</title>
                <description>Generated from sfdem</description>
                <abstract>Digital elevation model for the Spearfish region.

              sfdem is a Tagged Image File Format with Geographic
              information</abstract>
                <keywords>
                  <string>WCS</string>
                  <string>sfdem</string>
                  <string>sfdem</string>
                  <string>type\@language=fr\;\@vocabulary=test\;</string>
                </keywords>
                <nativeCRS class="projected">PROJCS[&quot;NAD27 / UTM zone 13N&quot;,
                GEOGCS[&quot;NAD27&quot;,
                  DATUM[&quot;North American Datum 1927&quot;,
                    SPHEROID[&quot;Clarke 1866&quot;, 6378206.4, 294.9786982138982, AUTHORITY[&quot;EPSG&quot;,&quot;7008&quot;]],
                    TOWGS84[2.478, 149.752, 197.726, 0.526, -0.498, 0.501, 0.685],
                    AUTHORITY[&quot;EPSG&quot;,&quot;6267&quot;]],
                  PRIMEM[&quot;Greenwich&quot;, 0.0, AUTHORITY[&quot;EPSG&quot;,&quot;8901&quot;]],
                  UNIT[&quot;degree&quot;, 0.017453292519943295],
                  AXIS[&quot;Geodetic longitude&quot;, EAST],
                  AXIS[&quot;Geodetic latitude&quot;, NORTH],
                  AUTHORITY[&quot;EPSG&quot;,&quot;4267&quot;]],
                PROJECTION[&quot;Transverse_Mercator&quot;, AUTHORITY[&quot;EPSG&quot;,&quot;9807&quot;]],
                PARAMETER[&quot;central_meridian&quot;, -105.0],
                PARAMETER[&quot;latitude_of_origin&quot;, 0.0],
                PARAMETER[&quot;scale_factor&quot;, 0.9996],
                PARAMETER[&quot;false_easting&quot;, 500000.0],
                PARAMETER[&quot;false_northing&quot;, 0.0],
                UNIT[&quot;m&quot;, 1.0],
                AXIS[&quot;Easting&quot;, EAST],
                AXIS[&quot;Northing&quot;, NORTH],
                AUTHORITY[&quot;EPSG&quot;,&quot;26713&quot;]]</nativeCRS>
                <srs>EPSG:26713</srs>
                <nativeBoundingBox>
                  <minx>589980.0</minx>
                  <maxx>609000.0</maxx>
                  <miny>4913700.0</miny>
                  <maxy>4928010.0</maxy>
                  <crs class="projected">EPSG:26713</crs>
                </nativeBoundingBox>
                <latLonBoundingBox>
                  <minx>-103.87108701853181</minx>
                  <maxx>-103.62940739432703</maxx>
                  <miny>44.370187074132616</miny>
                  <maxy>44.5016011535299</maxy>
                  <crs>EPSG:4326</crs>
                </latLonBoundingBox>
                <enabled>true</enabled>
                <metadata>
                  <entry key="elevation">
                    <dimensionInfo>
                      <enabled>false</enabled>
                    </dimensionInfo>
                  </entry>
                  <entry key="cacheAgeMax">10</entry>
                  <entry key="time">
                    <dimensionInfo>
                      <enabled>false</enabled>
                      <defaultValue/>
                    </dimensionInfo>
                  </entry>
                  <entry key="cachingEnabled">true</entry>
                  <entry key="dirName">sfdem_sfdem</entry>
                </metadata>
                <store class="coverageStore">
                  <name>sf:sfdem</name>
                  <atom:link href="http://localhost:8080/geoserver/restng/workspaces/sf/coveragestores/sfdem.xml" rel="alternate" type="application/atom+xml" xmlns:atom="http://www.w3.org/2005/Atom"/>
                </store>
                <nativeFormat>GeoTIFF</nativeFormat>
                <grid dimension="2">
                  <range>
                    <low>0 0</low>
                    <high>634 477</high>
                  </range>
                  <transform>
                    <scaleX>30.0</scaleX>
                    <scaleY>-30.0</scaleY>
                    <shearX>0.0</shearX>
                    <shearY>0.0</shearY>
                    <translateX>589995.0</translateX>
                    <translateY>4927995.0</translateY>
                  </transform>
                  <crs>EPSG:26713</crs>
                </grid>
                <supportedFormats>
                  <string>ARCGRID</string>
                  <string>IMAGEMOSAIC</string>
                  <string>GTOPO30</string>
                  <string>GEOTIFF</string>
                  <string>GIF</string>
                  <string>PNG</string>
                  <string>JPEG</string>
                  <string>TIFF</string>
                </supportedFormats>
                <interpolationMethods>
                  <string>nearest neighbor</string>
                  <string>bilinear</string>
                  <string>bicubic</string>
                </interpolationMethods>
                <defaultInterpolationMethod>nearest neighbor</defaultInterpolationMethod>
                <dimensions>
                  <coverageDimension>
                    <name>GRAY_INDEX</name>
                    <description>GridSampleDimension[-9.999999933815813E36,-9.999999933815813E36]</description>
                    <range>
                      <min>-9.999999933815813E36</min>
                      <max>-9.999999933815813E36</max>
                    </range>
                  </coverageDimension>
                </dimensions>
                <requestSRS>
                  <string>EPSG:26713</string>
                </requestSRS>
                <responseSRS>
                  <string>EPSG:26713</string>
                </responseSRS>
              </coverage>
  '/workspaces/{workspace}/coveragestores/{store}/coverages/{coverage}':
    get:
      operationId: getWorkspaceCoverage
      description: Get an individual coverage.
      produces:
        - text/html
        - application/xml
        - application/json
      parameters:
        - name: workspace
          in: path
          description: The name of the workspace
          required: true
          type: string
        - name: store
          in: path
          description: The name of the coverage datastore
          required: true
          type: string
        - name: coverage
          in: path
          description: The name of the coverage
          required: true
          type: string
        - name: quietOnNotFound
          in: query
          description: >-
            The quietOnNotFound parameter avoids to log an Exception when the
            coverage is not present. Note that 404 status code will be returned
            anyway.
          type: boolean
          required: false
          default: false
      responses:
        '200':
          description: Successful response containing coverage.
          schema:
            type: object
            properties:
              featureType:
                $ref: '#/definitions/CoverageInfo'
          examples:
            application/json: |
              {
                "coverage": {
                    "abstract": "Digital elevation model for the Spearfish region.\r\n\r\nsfdem is a Tagged Image File Format with Geographic information",
                    "defaultInterpolationMethod": "nearest neighbor",
                    "description": "Generated from sfdem",
                    "dimensions": {
                        "coverageDimension": [
                            {
                                "description": "GridSampleDimension[-9.999999933815813E36,-9.999999933815813E36]",
                                "name": "GRAY_INDEX",
                                "range": {
                                    "max": -9.999999933815813e+36,
                                    "min": -9.999999933815813e+36
                                }
                            }
                        ]
                    },
                    "enabled": true,
                    "grid": {
                        "@dimension": "2",
                        "crs": "EPSG:26713",
                        "range": {
                            "high": "634 477",
                            "low": "0 0"
                        },
                        "transform": {
                            "scaleX": 30,
                            "scaleY": -30,
                            "shearX": 0,
                            "shearY": 0,
                            "translateX": 589995,
                            "translateY": 4927995
                        }
                    },
                    "interpolationMethods": {
                        "string": [
                            "nearest neighbor",
                            "bilinear",
                            "bicubic"
                        ]
                    },
                    "keywords": {
                        "string": [
                            "WCS",
                            "sfdem",
                            "sfdem"
                        ]
                    },
                    "latLonBoundingBox": {
                        "crs": "EPSG:4326",
                        "maxx": -103.62940739432703,
                        "maxy": 44.5016011535299,
                        "minx": -103.87108701853181,
                        "miny": 44.370187074132616
                    },
                    "metadata": {
                        "entry": {
                            "$": "sfdem_sfdem",
                            "@key": "dirName"
                        }
                    },
                    "name": "sfdem",
                    "namespace": {
                        "href": "http://localhost:/geoserver/restng/namespaces/sf.json",
                        "name": "sf"
                    },
                    "nativeBoundingBox": {
                        "crs": {
                            "$": "EPSG:26713",
                            "@class": "projected"
                        },
                        "maxx": 609000,
                        "maxy": 4928010,
                        "minx": 589980,
                        "miny": 4913700
                    },
                    "nativeCRS": {
                        "$": "PROJCS[\"NAD27 / UTM zone 13N\", \n  GEOGCS[\"NAD27\", \n    DATUM[\"North American Datum 1927\", \n      SPHEROID[\"Clarke 1866\", 6378206.4, 294.9786982138982, AUTHORITY[\"EPSG\",\"7008\"]], \n      TOWGS84[2.478, 149.752, 197.726, 0.526, -0.498, 0.501, 0.685], \n      AUTHORITY[\"EPSG\",\"6267\"]], \n    PRIMEM[\"Greenwich\", 0.0, AUTHORITY[\"EPSG\",\"8901\"]], \n    UNIT[\"degree\", 0.017453292519943295], \n    AXIS[\"Geodetic longitude\", EAST], \n    AXIS[\"Geodetic latitude\", NORTH], \n    AUTHORITY[\"EPSG\",\"4267\"]], \n  PROJECTION[\"Transverse_Mercator\"], \n  PARAMETER[\"central_meridian\", -105.0], \n  PARAMETER[\"latitude_of_origin\", 0.0], \n  PARAMETER[\"scale_factor\", 0.9996], \n  PARAMETER[\"false_easting\", 500000.0], \n  PARAMETER[\"false_northing\", 0.0], \n  UNIT[\"m\", 1.0], \n  AXIS[\"Easting\", EAST], \n  AXIS[\"Northing\", NORTH], \n  AUTHORITY[\"EPSG\",\"26713\"]]",
                        "@class": "projected"
                    },
                    "nativeFormat": "GeoTIFF",
                    "nativeName": "sfdem",
                    "requestSRS": {
                        "string": [
                            "EPSG:26713"
                        ]
                    },
                    "responseSRS": {
                        "string": [
                            "EPSG:26713"
                        ]
                    },
                    "srs": "EPSG:26713",
                    "store": {
                        "@class": "coverageStore",
                        "href": "http://localhost:/geoserver/restng/workspaces/sf/coveragestores/sfdem.json",
                        "name": "sf:sfdem"
                    },
                    "supportedFormats": {
                        "string": [
                            "ARCGRID",
                            "IMAGEMOSAIC",
                            "GTOPO30",
                            "GEOTIFF",
                            "GIF",
                            "PNG",
                            "JPEG",
                            "TIFF"
                        ]
                    },
                    "title": "Spearfish elevation"
                }
              }
            application/xml: >
              <coverage>
                <name>sfdem</name>
                <nativeName>sfdem</nativeName>
                <namespace>
                  <name>sf</name>
                  <atom:link href="http://localhost:8080/geoserver/restng/namespaces/sf.xml" rel="alternate" type="application/atom+xml" xmlns:atom="http://www.w3.org/2005/Atom"/>
                </namespace>
                <title>Spearfish elevation</title>
                <description>Generated from sfdem</description>
                <abstract>Digital elevation model for the Spearfish region.

              sfdem is a Tagged Image File Format with Geographic
              information</abstract>
                <keywords>
                  <string>WCS</string>
                  <string>sfdem</string>
                  <string>sfdem</string>
                  <string>type\@language=fr\;\@vocabulary=test\;</string>
                </keywords>
                <nativeCRS class="projected">PROJCS[&quot;NAD27 / UTM zone 13N&quot;,
                GEOGCS[&quot;NAD27&quot;,
                  DATUM[&quot;North American Datum 1927&quot;,
                    SPHEROID[&quot;Clarke 1866&quot;, 6378206.4, 294.9786982138982, AUTHORITY[&quot;EPSG&quot;,&quot;7008&quot;]],
                    TOWGS84[2.478, 149.752, 197.726, 0.526, -0.498, 0.501, 0.685],
                    AUTHORITY[&quot;EPSG&quot;,&quot;6267&quot;]],
                  PRIMEM[&quot;Greenwich&quot;, 0.0, AUTHORITY[&quot;EPSG&quot;,&quot;8901&quot;]],
                  UNIT[&quot;degree&quot;, 0.017453292519943295],
                  AXIS[&quot;Geodetic longitude&quot;, EAST],
                  AXIS[&quot;Geodetic latitude&quot;, NORTH],
                  AUTHORITY[&quot;EPSG&quot;,&quot;4267&quot;]],
                PROJECTION[&quot;Transverse_Mercator&quot;, AUTHORITY[&quot;EPSG&quot;,&quot;9807&quot;]],
                PARAMETER[&quot;central_meridian&quot;, -105.0],
                PARAMETER[&quot;latitude_of_origin&quot;, 0.0],
                PARAMETER[&quot;scale_factor&quot;, 0.9996],
                PARAMETER[&quot;false_easting&quot;, 500000.0],
                PARAMETER[&quot;false_northing&quot;, 0.0],
                UNIT[&quot;m&quot;, 1.0],
                AXIS[&quot;Easting&quot;, EAST],
                AXIS[&quot;Northing&quot;, NORTH],
                AUTHORITY[&quot;EPSG&quot;,&quot;26713&quot;]]</nativeCRS>
                <srs>EPSG:26713</srs>
                <nativeBoundingBox>
                  <minx>589980.0</minx>
                  <maxx>609000.0</maxx>
                  <miny>4913700.0</miny>
                  <maxy>4928010.0</maxy>
                  <crs class="projected">EPSG:26713</crs>
                </nativeBoundingBox>
                <latLonBoundingBox>
                  <minx>-103.87108701853181</minx>
                  <maxx>-103.62940739432703</maxx>
                  <miny>44.370187074132616</miny>
                  <maxy>44.5016011535299</maxy>
                  <crs>EPSG:4326</crs>
                </latLonBoundingBox>
                <enabled>true</enabled>
                <metadata>
                  <entry key="elevation">
                    <dimensionInfo>
                      <enabled>false</enabled>
                    </dimensionInfo>
                  </entry>
                  <entry key="cacheAgeMax">10</entry>
                  <entry key="time">
                    <dimensionInfo>
                      <enabled>false</enabled>
                      <defaultValue/>
                    </dimensionInfo>
                  </entry>
                  <entry key="cachingEnabled">true</entry>
                  <entry key="dirName">sfdem_sfdem</entry>
                </metadata>
                <store class="coverageStore">
                  <name>sf:sfdem</name>
                  <atom:link href="http://localhost:8080/geoserver/restng/workspaces/sf/coveragestores/sfdem.xml" rel="alternate" type="application/atom+xml" xmlns:atom="http://www.w3.org/2005/Atom"/>
                </store>
                <nativeFormat>GeoTIFF</nativeFormat>
                <grid dimension="2">
                  <range>
                    <low>0 0</low>
                    <high>634 477</high>
                  </range>
                  <transform>
                    <scaleX>30.0</scaleX>
                    <scaleY>-30.0</scaleY>
                    <shearX>0.0</shearX>
                    <shearY>0.0</shearY>
                    <translateX>589995.0</translateX>
                    <translateY>4927995.0</translateY>
                  </transform>
                  <crs>EPSG:26713</crs>
                </grid>
                <supportedFormats>
                  <string>ARCGRID</string>
                  <string>IMAGEMOSAIC</string>
                  <string>GTOPO30</string>
                  <string>GEOTIFF</string>
                  <string>GIF</string>
                  <string>PNG</string>
                  <string>JPEG</string>
                  <string>TIFF</string>
                </supportedFormats>
                <interpolationMethods>
                  <string>nearest neighbor</string>
                  <string>bilinear</string>
                  <string>bicubic</string>
                </interpolationMethods>
                <defaultInterpolationMethod>nearest neighbor</defaultInterpolationMethod>
                <dimensions>
                  <coverageDimension>
                    <name>GRAY_INDEX</name>
                    <description>GridSampleDimension[-9.999999933815813E36,-9.999999933815813E36]</description>
                    <range>
                      <min>-9.999999933815813E36</min>
                      <max>-9.999999933815813E36</max>
                    </range>
                  </coverageDimension>
                </dimensions>
                <requestSRS>
                  <string>EPSG:26713</string>
                </requestSRS>
                <responseSRS>
                  <string>EPSG:26713</string>
                </responseSRS>
              </coverage>
    put:
      operationId: putWorkspaceCoverage
      description: Update an individual coverage
      consumes:
        - application/xml
        - text/xml
        - application/json
        - text/json
      parameters:
        - name: workspace
          in: path
          description: The name of the workspace
          required: true
          type: string
        - name: store
          in: path
          description: The name of the coverage data store
          required: true
          type: string
        - name: coverage
          in: path
          description: The name of the coverage
          required: true
          type: string
        - name: coverage
          in: body
          description: The body of the coverage to PUT
          required: true
          schema:
            $ref: '#/definitions/CoverageInfo'
        - name: calculate
          in: query
          description: >-
            Comma-seperated list of optional fields to calculate. Optional
            fields include: "nativebbox", "latlonbbox".
          required: false
          type: array
          collectionFormat: csv
          minItems: 0
          maxItems: 2
          items:
            type: string
            enum:
              - nativebbox
              - latlonbbox
      responses:
        '200':
          description: The coverage was successfully updated.
    delete:
      operationId: deleteWorkspaceCoverage
      description: Delete a coverage (optionally recursively deleting layers).
      parameters:
        - name: workspace
          in: path
          description: The name of the workspace
          required: true
          type: string
        - name: store
          in: path
          description: The name of the coverage data store
          required: true
          type: string
        - name: coverage
          in: path
          description: The name of the coverage
          required: true
          type: string
        - name: recurse
          type: boolean
          in: query
          required: false
          description: >-
            The recurse controls recursive deletion. When set to true all stores
            containing the resource are also removed.
          default: false
      responses:
        '200':
          description: Successfully deleted.
  '/workspaces/{workspace}/coveragestores':
    get:
      operationId: getCoverageStores
      summary: 'Get a list of all coverage stores in {workspace}'
      description: >-
        Displays a list of all styles on the server. Use the "Accept:" header to
        specify format or append an extension to the endpoint (example
        "/coveragestores.xml" for XML). Defaults to HTML representation.
      produces:
        - text/html
        - application/json
        - application/xml
      parameters:
        - name: workspace
          in: path
          required: true
          description: The name of the worskpace containing the coverage stores.
          type: string
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/CoverageStoreList'
          examples:
            application/json: |
              {
                "coverageStores": {
                  "coverageStore": [
                    {
                      "name": "arcGridSample",
                      "href": "http://localhost:8080/geoserver/restng/workspaces/nurc/coveragestores/arcGridSample.json"
                    },
                    {
                      "name": "worldImageSample",
                      "href": "http://localhost:8080/geoserver/restng/workspaces/nurc/coveragestores/worldImageSample.json"
                    }
                  ]
                }
              }
            application/xml: |
              <coverageStores>
                <coverageStore>
                  <name>arcGridSample</name>
                  <atom:link xmlns:atom="http://www.w3.org/2005/Atom" rel="alternate" href="http://localhost:8080/geoserver/restng/workspaces/nurc/coveragestores/arcGridSample.xml" type="application/atom+xml"/>
                </coverageStore>
                <coverageStore>
                  <name>worldImageSample</name>
                  <atom:link xmlns:atom="http://www.w3.org/2005/Atom" rel="alternate" href="http://localhost:8080/geoserver/restng/workspaces/nurc/coveragestores/worldImageSample.xml" type="application/atom+xml"/>
                </coverageStore>
              </coverageStores>
        '401':
          description: Unauthorized
    post:
      operationId: postCoverageStores
      summary: Add a new coverage store
      description: Adds a new coverage store entry to the server.
      parameters:
        - name: workspace
          in: path
          required: true
          description: The name of the worskpace containing the coverage stores.
          type: string
        - $ref: '#/parameters/CoverageStorePost'
      consumes:
        - application/xml
        - application/json
      responses:
        '201':
          description: Created
          schema:
            type: string
          headers:
            Location:
              description: URL where the newly created store can be found
              type: string
        '401':
          description: Unauthorized
  '/workspaces/{workspace}/coveragestores/{store}':
    get:
      operationId: getCoverageStore
      summary: 'Get a coverage store named {store} in the {workspace} workspace'
      description: >-
        Displays a representation of the coverage store. Use the "Accept:"
        header to specify format or append an extension to the endpoint (example
        "/{store}.xml" for XML). Defaults to HTML representation.
      produces:
        - text/html
        - application/json
        - application/xml
      parameters:
        - name: workspace
          in: path
          required: true
          description: The name of the worskpace containing the coverage stores.
          type: string
        - name: store
          in: path
          required: true
          description: The name of the store to be retrieved
          type: string
        - name: quietOnNotFound
          in: query
          required: false
          description: >-
            When set to true, avoids to log an Exception when the coverage store
            is not present. Note that 404 status code will be returned anyway.
          type: boolean
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/CoverageStoreInfo'
          examples:
            application/json: |
              {
                "coverageStore": {
                  "name": "arcGridSample",
                  "description": "Sample ASCII GRID coverage of Global rainfall.",
                  "type": "ArcGrid",
                  "enabled": true,
                  "workspace": {
                    "name": "nurc",
                    "href": "http://localhost:8080/geoserver/restng/workspaces/nurc.json"
                  },
                  "_default": false,
                  "url": "file:coverages/arc_sample/precip30min.asc",
                  "coverages": "http://localhost:8080/geoserver/restng/workspaces/nurc/coveragestores/arcGridSample/coverages.json"
                }
              }
            application/xml: |
              <coverageStore>
                <name>arcGridSample</name>
                <description>Sample ASCII GRID coverage of Global rainfall.</description>
                <type>ArcGrid</type>
                <enabled>true</enabled>
                <workspace>
                  <name>nurc</name>
                  <atom:link xmlns:atom="http://www.w3.org/2005/Atom" rel="alternate" href="http://localhost:8080/geoserver/restng/workspaces/nurc.xml" type="application/atom+xml"/>
                </workspace>
                <__default>false</__default>
                <url>file:coverages/arc_sample/precip30min.asc</url>
                <coverages>
                  <atom:link xmlns:atom="http://www.w3.org/2005/Atom" rel="alternate" href="http://localhost:8080/geoserver/restng/workspaces/nurc/coveragestores/arcGridSample/coverages.xml" type="application/atom+xml"/>
                </coverages>
              </coverageStore>
        '401':
          description: Unauthorized
    put:
      operationId: putCoverageStore
      summary: Modify a single coverage store.
      description: >-
        Modifies a single coverage store. Use the "Accept:" header to specify
        format or append an extension to the endpoint (example "{store}.xml" for
        XML).
      parameters:
        - name: workspace
          in: path
          required: true
          description: The name of the worskpace containing the coverage stores.
          type: string
        - name: store
          in: path
          required: true
          description: The name of the store to be retrieved
          type: string
        - $ref: '#/parameters/CoverageStorePut'
      consumes:
        - application/xml
        - application/json
      responses:
        '200':
          description: The coverage store was successfully updated.
        '401':
          description: Unauthorized
    delete:
      operationId: deleteCoverageStore
      summary: Delete coverage store
      description: Deletes a coverage store
      parameters:
        - name: workspace
          in: path
          required: true
          description: The name of the worskpace containing the coverage stores.
          type: string
        - name: store
          in: path
          required: true
          description: The name of the store to be retrieved
          type: string
        - name: purge
          in: query
          required: false
          description: >-
            The purge parameter specifies if and how the underlying raster data
            source is deleted. Allowable values for this parameter are "none",
            "metadata", "all". When set to "none" data and auxiliary files are
            preserved. When set to "metadata" delete only auxiliary files and
            metadata. Itâ€™s recommended when data files (such as granules)
            should not be deleted from disk. Finally, when set to "all" both
            data and auxiliary files are removed.
          type: string
        - name: recurse
          in: query
          required: false
          description: >-
            The recurse controls recursive deletion. When set to true all
            resources contained in the store are also removed. The default value
            is "false".
          type: boolean
      responses:
        '200':
          description: OK
        '401':
          description: Unauthorized
  '/workspaces/{workspace}/coveragestores/{store}/{method}.{format}':
    post:
      operationId: postCoverageStoreUpload
      description: >-
        Used to harvest new granules in a writable structured grid coverage
        reader (e.g., image mosaic). Attempting to harvest a file into any other
        reader will result in a HTTP 405, method not allowed. Multiple granules
        can be uploaded by wrapping them in a ZIP file.
      parameters:
        - name: workspace
          in: path
          required: true
          description: The name of the worskpace containing the coverage stores.
          type: string
        - name: store
          in: path
          required: true
          description: The name of the store to be retrieved
          type: string
        - name: method
          in: path
          required: true
          description: >-
            The upload method. Can be "url", "file", "external". "file" uploads
            a file from a local source. The body of the request is the file
            itself. "url" uploads a file from an remote source. The body of the
            request is a URL pointing to the file to upload. This URL must be
            visible from the server. "external" uses an existing file on the
            server. The body of the request is the absolute path to the existing
            file.
          type: string
        - name: format
          in: path
          required: true
          description: 'The type of target coverage store (e.g., "imagemosaic")'
          type: string
        - name: filename
          in: query
          required: false
          description: >-
            The filename parameter specifies the target file name for a file
            that needs to harvested as part of a mosaic. This is important to
            avoid clashes and to make sure the right dimension values are
            available in the name for multidimensional mosaics to work. Only
            used if method="file".
          type: string
      responses:
        '200':
          description: The coverage store was successfully updated.
        '401':
          description: Unauthorized
    put:
      operationId: putCoverageStoreUpload
      summary: Creates or overwrites the files for a coverage store
      description: >-
        Creates or modified a single coverage store by uploading its raster data
        files. Multi-file stores like mosaic can be created by uploading a zip
        file and setting the content type to "application/zip"
      parameters:
        - name: workspace
          in: path
          required: true
          description: The name of the worskpace containing the coverage stores.
          type: string
        - name: store
          in: path
          required: true
          description: The name of the store to be retrieved
          type: string
        - name: method
          in: path
          required: true
          description: >-
            The upload method. Can be "url", "file", "external". "file" uploads
            a file from a local source. The body of the request is the file
            itself. "url" uploads a file from an remote source. The body of the
            request is a URL pointing to the file to upload. This URL must be
            visible from the server. "external" uses an existing file on the
            server. The body of the request is the absolute path to the existing
            file.
          type: string
        - name: format
          in: path
          required: true
          description: 'The type of target coverage store (e.g., "imagemosaic")'
          type: string
        - name: configure
          in: query
          required: false
          description: >-
            The configure parameter controls if a coverage/layer are configured
            upon file upload, in addition to creating the store. It can have a
            value of "none" to avoid configuring coverages.
          type: string
        - name: USE_JAI_IMAGEREAD
          in: query
          required: false
          description: >-
            Whether to use deferred loading while configuring the
            coverage/layer.
          type: string
        - name: coverageName
          in: query
          required: false
          description: Name of the newly created coverage/layer.
          type: string
        - name: filename
          in: query
          required: false
          description: >-
            The filename parameter specifies the target file name for a file
            that needs to harvested as part of a mosaic. This is important to
            avoid clashes and to make sure the right dimension values are
            available in the name for multidimensional mosaics to work. Only
            used if method="file".
          type: string
      responses:
        '200':
          description: The coverage store was successfully updated.
        '401':
          description: Unauthorized
  '/workspaces/{workspaceName}/datastores/{storeName}/featuretypes':
    get:
      description: >
        Get a list of feature types for the workspace and datastore. Use the
        "Accept:" header to specify format or append an extension to the
        endpoint (example "/featuretypes.xml" for XML)
      parameters:
        - name: workspaceName
          in: path
          description: The name of the workspace
          required: true
          type: string
        - name: storeName
          in: path
          description: The name of the datastore
          required: true
          type: string
        - name: list
          description: >
            The list parameter is used to control the category of feature types
            that are returned. Must be one of "configured", "available",
            "available_with_geom", "all"
          in: query
          required: false
          type: string
          enum:
            - configured
            - available
            - available_with_geom
            - all
      produces:
        - text/html
        - application/xml
        - application/json
      responses:
        '200':
          description: Successful response containing featuretype list.
          schema:
            type: object
            properties:
              featureTypes:
                type: object
                properties:
                  featureType:
                    type: array
                    items:
                      type: object
                      properties:
                        name:
                          type: string
                          description: The Name
                        link:
                          type: string
                          description: The URL
          examples:
            application/json: |
              {"featureTypes": {
                  "featureType": [
                    {
                      "name": "PrimitiveGeoFeature",
                      "href": "http://localhost:8080/geoserver/restng/workspaces/sf/datastores/sf/featuretypes/PrimitiveGeoFeature.json"
                    },
                    {
                      "name": "archsites",
                      "href": "http://localhost:8080/geoserver/restng/workspaces/sf/datastores/sf/featuretypes/archsites.json"
                    }
                  ]
                }
              }
            application/xml: |
              <featureTypes>
                  <featureType>
                      <name>PrimitiveGeoFeature</name>
                      <atom:link xmlns:atom="http://www.w3.org/2005/Atom" rel="alternate" href="http://localhost:8080/geoserver/restng/workspaces/sf/datastores/sf/featuretypes/PrimitiveGeoFeature.xml" type="application/atom+xml"/>
                  </featureType>
                  <featureType>
                      <name>archsites</name>
                      <atom:link xmlns:atom="http://www.w3.org/2005/Atom" rel="alternate" href="http://localhost:8080/geoserver/restng/workspaces/sf/datastores/sf/featuretypes/archsites.xml" type="application/atom+xml"/>
                  </featureType>
              </featureTypes>
            application/xml (list=available): |
              <?xml version="1.0" encoding="UTF-8"?>
              <list>
                <featureTypeName>pdsa</featureTypeName>
                <featureTypeName>pdsb</featureTypeName>
              </list>
            application/json (list=available): |
              {"list": { 
               "string": [
                    "pdsa",
                    "pdsb"
                  ]
                }
              }
    post:
      operationId: postFeatureTypes
      description: >
        Create a new feature type. Note -  when creating a new feature type via
        POST, if no underlying dataset with the specified name exists an attempt
        will be made to create it. This will work only in cases where the
        underlying data format supports the creation of new types (such as a
        database). When creating a feature type in this manner the client should
        include all attribute information in the feature type representation.
      parameters:
        - name: workspaceName
          in: path
          description: The name of the workspace
          required: true
          type: string
        - name: storeName
          in: path
          description: The name of the datastore
          required: true
          type: string
        - name: featureType
          in: body
          description: The body of the feature type to POST
          required: true
          schema:
            $ref: '#/definitions/FeatureTypeInfo'
      consumes:
        - application/xml
        - application/json
      responses:
        '201':
          description: The feature type was successfully created.
          headers:
            Location:
              description: The location of the newly created feature type.
              type: string
  '/workspaces/{workspaceName}/featuretypes':
    get:
      operationId: getFeatureTypes
      description: >
        Get a list of all feature types for all datastors in the workspace. Use
        the "Accept:" header to specify format or append an extension to the
        endpoint (example "/featuretypes.xml" for XML)
      parameters:
        - name: workspaceName
          in: path
          description: The name of the workspace
          required: true
          type: string
        - name: list
          description: >
            The list parameter is used to control the category of feature types
            that are returned. Must be one of "configured", "available",
            "available_with_geom", "all"
          in: query
          required: false
          type: string
          enum:
            - configured
            - available
            - available_with_geom
            - all
      produces:
        - text/html
        - application/xml
        - application/json
      responses:
        '200':
          description: Successful response containing featuretype list.
          schema:
            type: object
            properties:
              featureTypes:
                type: object
                properties:
                  featureType:
                    type: array
                    items:
                      type: object
                      properties:
                        name:
                          type: string
                          description: The Name
                        link:
                          type: string
                          description: The URL
          examples:
            application/json: |
              {"featureTypes": {
                  "featureType": [
                    {
                      "name": "PrimitiveGeoFeature",
                      "href": "http://localhost:8080/geoserver/restng/workspaces/sf/datastores/sf/featuretypes/PrimitiveGeoFeature.json"
                    },
                    {
                      "name": "archsites",
                      "href": "http://localhost:8080/geoserver/restng/workspaces/sf/datastores/sf/featuretypes/archsites.json"
                    }
                  ]
                }
              }
            application/xml: |
              <featureTypes>
                  <featureType>
                      <name>PrimitiveGeoFeature</name>
                      <atom:link xmlns:atom="http://www.w3.org/2005/Atom" rel="alternate" href="http://localhost:8080/geoserver/restng/workspaces/sf/datastores/sf/featuretypes/PrimitiveGeoFeature.xml" type="application/atom+xml"/>
                  </featureType>
                  <featureType>
                      <name>archsites</name>
                      <atom:link xmlns:atom="http://www.w3.org/2005/Atom" rel="alternate" href="http://localhost:8080/geoserver/restng/workspaces/sf/datastores/sf/featuretypes/archsites.xml" type="application/atom+xml"/>
                  </featureType>
              </featureTypes>
            application/xml (list=available): |
              <?xml version="1.0" encoding="UTF-8"?>
              <list>
                <featureTypeName>pdsa</featureTypeName>
                <featureTypeName>pdsb</featureTypeName>
              </list>
            application/json (list=available): |
              {"list": { 
               "string": [
                    "pdsa",
                    "pdsb"
                  ]
                }
              }
    post:
      description: >
        Create a new feature type, the feature type definition needs to
        reference a store. Note -  when creating a new feature type via POST, if
        no underlying dataset with the specified name exists an attempt will be
        made to create it. This will work only in cases where the underlying
        data format supports the creation of new types (such as a database).
        When creating a feature type in this manner the client should include
        all attribute information in the feature type representation.
      parameters:
        - name: workspaceName
          in: path
          description: The name of the workspace
          required: true
          type: string
        - name: featureType
          in: body
          description: The body of the feature type to POST
          required: true
          schema:
            $ref: '#/definitions/FeatureTypeInfo'
      consumes:
        - application/xml
        - application/json
      responses:
        '201':
          description: The feature type was successfully created.
          headers:
            Location:
              description: The location of the newly created feature type.
              type: string
  '/workspaces/{workspaceName}/datastores/{storeName}/featuretypes/{featureTypeName}':
    get:
      operationId: getFeatureType
      description: Get an individual feature type
      produces:
        - text/html
        - application/xml
        - application/json
      parameters:
        - name: workspaceName
          in: path
          description: The name of the workspace
          required: true
          type: string
        - name: storeName
          in: path
          description: The name of the datastore
          required: true
          type: string
        - name: featureTypeName
          in: path
          description: The name of the feature type
          required: true
          type: string
        - name: quietOnNotFound
          in: query
          description: >-
            Prevents logging an Exception when the feature type is not present.
            Note that 404 status code will be returned anyway. Defaults to
            "false".
          type: boolean
          required: false
          default: false
      responses:
        '200':
          description: Successful response containing feature type.
          schema:
            type: object
            properties:
              featureType:
                $ref: '#/definitions/FeatureTypeInfo'
          examples:
            application/json: |
              {  "name": "poi",
                  "nativeName": "poi",
                  "namespace": {
                    "name": "tiger",
                    "href": "http://localhost:8080/geoserver/rest/namespaces/tiger.json"
                  },
                  "title": "Manhattan (NY) points of interest",
                  "abstract": "Points of interest in New York, New York (on Manhattan). One of the attributes contains the name of a file with a picture of the point of interest.",
                  "keywords": {
                    "string": [
                      "poi",
                      "Manhattan",
                      "DS_poi",
                      "points_of_interest",
                      "sampleKeyword\\@language=ab\\;",
                      "area of effect\\@language=bg\\;\\@vocabulary=technical\\;",
                      "ÐŸÑ€Ð¸Ð²ÐµÑ‚\\@language=ru\\;\\@vocabulary=friendly\\;"
                    ]
                  },
                  "metadataLinks": {
                    "metadataLink": [
                      {
                        "type": "text/plain",
                        "metadataType": "FGDC",
                        "content": "www.google.com"
                      }
                    ]
                  },
                  "dataLinks": {
                    "org.geoserver.catalog.impl.DataLinkInfoImpl": [
                      {
                        "type": "text/plain",
                        "content": "http://www.google.com"
                      }
                    ]
                  },                  
                  "nativeCRS": "GEOGCS[\"WGS 84\", \n  DATUM[\"World Geodetic System 1984\", \n    SPHEROID[\"WGS 84\", 6378137.0, 298.257223563, AUTHORITY[\"EPSG\",\"7030\"]], \n    AUTHORITY[\"EPSG\",\"6326\"]], \n  PRIMEM[\"Greenwich\", 0.0, AUTHORITY[\"EPSG\",\"8901\"]], \n  UNIT[\"degree\", 0.017453292519943295], \n  AXIS[\"Geodetic longitude\", EAST], \n  AXIS[\"Geodetic latitude\", NORTH], \n  AUTHORITY[\"EPSG\",\"4326\"]]",
                  "srs": "EPSG:4326",
                  "nativeBoundingBox": {
                    "minx": -74.0118315772888,
                    "maxx": -74.00153046439813,
                    "miny": 40.70754683896324,
                    "maxy": 40.719885123828675,
                    "crs": "EPSG:4326"
                  },
                  "latLonBoundingBox": {
                    "minx": -74.0118315772888,
                    "maxx": -74.00857344353275,
                    "miny": 40.70754683896324,
                    "maxy": 40.711945649065406,
                    "crs": "EPSG:4326"
                  },
                  "projectionPolicy": "REPROJECT_TO_DECLARED",
                  "enabled": true,
                  "metadata": {
                    "entry": [
                      {
                        "@key": "kml.regionateStrategy",
                        "$": "external-sorting"
                      },
                      {
                        "@key": "kml.regionateFeatureLimit",
                        "$": "15"
                      },
                      {
                        "@key": "cacheAgeMax",
                        "$": "3000"
                      },
                      {
                        "@key": "cachingEnabled",
                        "$": "true"
                      },
                      {
                        "@key": "kml.regionateAttribute",
                        "$": "NAME"
                      },
                      {
                        "@key": "indexingEnabled",
                        "$": "false"
                      },
                      {
                        "@key": "dirName",
                        "$": "DS_poi_poi"
                      }
                    ]
                  },
                  "store": {
                    "@class": "dataStore",
                    "name": "tiger:nyc",
                    "href": "http://localhost:8080/geoserver/rest/workspaces/tiger/datastores/nyc.json"
                  },
                  "cqlFilter": "INCLUDE",
                  "maxFeatures": 100,
                  "numDecimals": 6,
                  "responseSRS": {
                    "string": [
                      4326
                    ]
                  },
                  "overridingServiceSRS": true,
                  "skipNumberMatched": true,
                  "circularArcPresent": true,
                  "linearizationTolerance": 10,
                  "attributes": {
                    "attribute": [
                      {
                        "name": "the_geom",
                        "minOccurs": 0,
                        "maxOccurs": 1,
                        "nillable": true,
                        "binding": "com.vividsolutions.jts.geom.Point"
                      },
                      {
                        "name": "NAME",
                        "minOccurs": 0,
                        "maxOccurs": 1,
                        "nillable": true,
                        "binding": "java.lang.String",
                        "length": 6
                      },
                      {
                        "name": "THUMBNAIL",
                        "minOccurs": 0,
                        "maxOccurs": 1,
                        "nillable": true,
                        "binding": "java.lang.String",
                        "length": 20
                      },
                      {
                        "name": "MAINPAGE",
                        "minOccurs": 0,
                        "maxOccurs": 1,
                        "nillable": true,
                        "binding": "java.lang.String",
                        "length": 19
                      }
                    ]
                  }              
              }
            application/xml: |
              <featureType>
                    <name>poi</name>
                    <nativeName>poi</nativeName>
                    <namespace>
                            <name>tiger</name>
                            <atom:link xmlns:atom="http://www.w3.org/2005/Atom" rel="alternate" href="http://localhost:8080/geoserver/rest/namespaces/tiger.xml" type="application/xml"/>
                    </namespace>
                    <title>Manhattan (NY) points of interest</title>
                    <abstract>Points of interest in New York, New York (on Manhattan). One of the attributes contains the name of a file with a picture of the point of interest.</abstract>
                    <keywords>
                            <string>poi</string>
                            <string>Manhattan</string>
                            <string>DS_poi</string>
                            <string>points_of_interest</string>
                            <string>fred\@language=ab\;</string>
                            <string>area of effect\@language=bg\;\@vocabulary=Technical\;</string>
                            <string>ÐŸÑ€Ð¸Ð²ÐµÑ‚\@language=ru\;\@vocabulary=Friendly\;</string>
                    </keywords>
                    <metadataLinks>
                            <metadataLink>
                                  <type>text/plain</type>
                                  <metadataType>FGDC</metadataType>
                                  <content>http://www.google.com</content>
                            </metadataLink>
                    </metadataLinks>
                    <dataLinks>
                            <org.geoserver.catalog.impl.DataLinkInfoImpl>
                                  <type>text/plain</type>
                                  <content>http://www.google.com</content>
                            </org.geoserver.catalog.impl.DataLinkInfoImpl>
                    </dataLinks>
                    <nativeCRS>GEOGCS["WGS 84", DATUM["World Geodetic System 1984", SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], AUTHORITY["EPSG","6326"]], PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], UNIT["degree", 0.017453292519943295], AXIS["Geodetic longitude", EAST], AXIS["Geodetic latitude", NORTH], AUTHORITY["EPSG","4326"]]</nativeCRS>
                    <srs>EPSG:4326</srs>
                    <nativeBoundingBox>
                            <minx>-74.0118315772888</minx>
                            <maxx>-74.00153046439813</maxx>
                            <miny>40.70754683896324</miny>
                            <maxy>40.719885123828675</maxy>
                            <crs>EPSG:4326</crs>
                    </nativeBoundingBox>
                    <latLonBoundingBox>
                            <minx>-74.0118315772888</minx>
                            <maxx>-74.00857344353275</maxx>
                            <miny>40.70754683896324</miny>
                            <maxy>40.711945649065406</maxy>
                            <crs>EPSG:4326</crs>
                    </latLonBoundingBox>
                    <projectionPolicy>NONE</projectionPolicy>
                    <enabled>true</enabled>
                    <metadata>
                            <entry key="kml.regionateStrategy">external-sorting</entry>
                            <entry key="elevation">
                                  <dimensionInfo>
                                          <enabled>false</enabled>
                                  </dimensionInfo>
                            </entry>
                            <entry key="kml.regionateFeatureLimit">15</entry>
                            <entry key="cacheAgeMax">3000</entry>
                            <entry key="time">
                                  <dimensionInfo>
                                          <enabled>false</enabled>
                                          <defaultValue/>
                                  </dimensionInfo>
                            </entry>
                            <entry key="cachingEnabled">true</entry>
                            <entry key="kml.regionateAttribute">NAME</entry>
                            <entry key="indexingEnabled">false</entry>
                            <entry key="dirName">DS_poi_poi</entry>
                    </metadata>
                    <store class="dataStore">
                            <name>tiger:nyc</name>
                            <atom:link xmlns:atom="http://www.w3.org/2005/Atom" rel="alternate" href="http://localhost:8080/geoserver/rest/workspaces/tiger/datastores/nyc.xml" type="application/xml"/>
                    </store>
                    <cqlFilter>INCLUDE</cqlFilter>
                    <maxFeatures>100</maxFeatures>
                    <numDecimals>6</numDecimals>
                    <responseSRS>
                            <string>4326</string>
                    </responseSRS>
                    <overridingServiceSRS>true</overridingServiceSRS>
                    <skipNumberMatched>true</skipNumberMatched>
                    <circularArcPresent>true</circularArcPresent>
                    <linearizationTolerance>10</linearizationTolerance>
                    <attributes>
                            <attribute>
                                  <name>the_geom</name>
                                  <minOccurs>0</minOccurs>
                                  <maxOccurs>1</maxOccurs>
                                  <nillable>true</nillable>
                                  <binding>com.vividsolutions.jts.geom.Point</binding>
                            </attribute>
                            <attribute>
                                  <name>NAME</name>
                                  <minOccurs>0</minOccurs>
                                  <maxOccurs>1</maxOccurs>
                                  <nillable>true</nillable>
                                  <binding>java.lang.String</binding>
                                  <length>6</length>
                            </attribute>
                            <attribute>
                                  <name>THUMBNAIL</name>
                                  <minOccurs>0</minOccurs>
                                  <maxOccurs>1</maxOccurs>
                                  <nillable>true</nillable>
                                  <binding>java.lang.String</binding>
                                  <length>20</length>
                            </attribute>
                            <attribute>
                                  <name>MAINPAGE</name>
                                  <minOccurs>0</minOccurs>
                                  <maxOccurs>1</maxOccurs>
                                  <nillable>true</nillable>
                                  <binding>java.lang.String</binding>
                                  <length>19</length>
                            </attribute>
                    </attributes>
              </featureType>
    put:
      operationId: putFeatureType
      description: Update an individual feature type
      consumes:
        - application/xml
        - text/xml
        - application/json
        - text/json
      parameters:
        - name: workspaceName
          in: path
          description: The name of the workspace
          required: true
          type: string
        - name: storeName
          in: path
          description: The name of the datastore
          required: true
          type: string
        - name: featureTypeName
          in: path
          description: The name of the feature type
          required: true
          type: string
        - name: recalculate
          in: query
          description: >-
            Specifies whether to recalculate any bounding boxes for a feature
            type. Some properties of feature types are automatically
            recalculated when necessary. In particular, the native bounding box
            is recalculated when the projection or projection policy are
            changed, and the lat/lon bounding box is recalculated when the
            native bounding box is recalculated, or when a new native bounding
            box is explicitly provided in the request. (The native and lat/lon
            bounding boxes are not automatically recalculated when they are
            explicitly included in the request.) In addition, the client may
            explicitly request a fixed set of fields to calculate, by including
            a comma-separated list of their names in the recalculate parameter. 
            The empty parameter 'recalculate=' is useful avoid slow
            recalculation when operating against large datasets as
            'recalculate=' avoids calculating any fields, regardless of any
            changes to projection, projection policy, etc. The nativebbox
            parameter 'recalculate=nativebbox' is used recalculates the native
            bounding box, while avoiding recalculating the lat/lon bounding box.
            Recalculate parameters can be used in together -
            'recalculate=nativebbox,latlonbbox' can be used after a bulk import
            to  to recalculates both the native bounding box and the lat/lon
            bounding box.
          required: false
          type: array
          collectionFormat: csv
          minItems: 0
          maxItems: 2
          items:
            type: string
            enum:
              - nativebbox
              - latlonbbox
        - name: featureType
          in: body
          description: The body of the feature type to POST
          required: true
          schema:
            $ref: '#/definitions/FeatureTypeInfo'
      responses:
        '200':
          description: The feature type was successfully updated.
    delete:
      operationId: deleteFeatureType
      description: Delete a feature type (optionally recursively deleting layers).
      parameters:
        - name: workspaceName
          in: path
          description: The name of the workspace
          required: true
          type: string
        - name: storeName
          in: path
          description: The name of the datastore
          required: true
          type: string
        - name: featureTypeName
          in: path
          description: The name of the feature type
          required: true
          type: string
        - name: recurse
          in: query
          description: >-
            Recursively deletes all layers referenced by the specified
            featuretype. Allowed values for this parameter are true or false.
            The default value is false. A request with 'recurse=false' will fail
            if any layers reference the featuretype.
          required: false
          type: boolean
          default: false
      responses:
        '200':
          description: The feature type was successfully deleted.
  '/workspaces/{workspaceName}/featuretypes/{featureTypeName}':
    get:
      description: >-
        Get an individual feature type in the default data store for the
        workspace
      produces:
        - text/html
        - application/xml
        - application/json
      parameters:
        - name: workspaceName
          in: path
          description: The name of the workspace
          required: true
          type: string
        - name: featureTypeName
          in: path
          description: The name of the feature type
          required: true
          type: string
        - name: quietOnNotFound
          in: query
          description: >-
            Prevents logging an Exception when the feature type is not present.
            Note that 404 status code will be returned anyway. Defaults to
            "false".
          type: boolean
          required: false
          default: false
      responses:
        '200':
          description: Successful response containing feature type.
          schema:
            type: object
            properties:
              featureType:
                $ref: '#/definitions/FeatureTypeInfo'
          examples:
            application/json: |
              {  "name": "poi",
                  "nativeName": "poi",
                  "namespace": {
                    "name": "tiger",
                    "href": "http://localhost:8080/geoserver/rest/namespaces/tiger.json"
                  },
                  "title": "Manhattan (NY) points of interest",
                  "abstract": "Points of interest in New York, New York (on Manhattan). One of the attributes contains the name of a file with a picture of the point of interest.",
                  "keywords": {
                    "string": [
                      "poi",
                      "Manhattan",
                      "DS_poi",
                      "points_of_interest",
                      "sampleKeyword\\@language=ab\\;",
                      "area of effect\\@language=bg\\;\\@vocabulary=technical\\;",
                      "ÐŸÑ€Ð¸Ð²ÐµÑ‚\\@language=ru\\;\\@vocabulary=friendly\\;"
                    ]
                  },
                  "metadataLinks": {
                    "metadataLink": [
                      {
                        "type": "text/plain",
                        "metadataType": "FGDC",
                        "content": "www.google.com"
                      }
                    ]
                  },
                  "dataLinks": {
                    "org.geoserver.catalog.impl.DataLinkInfoImpl": [
                      {
                        "type": "text/plain",
                        "content": "http://www.google.com"
                      }
                    ]
                  },                  
                  "nativeCRS": "GEOGCS[\"WGS 84\", \n  DATUM[\"World Geodetic System 1984\", \n    SPHEROID[\"WGS 84\", 6378137.0, 298.257223563, AUTHORITY[\"EPSG\",\"7030\"]], \n    AUTHORITY[\"EPSG\",\"6326\"]], \n  PRIMEM[\"Greenwich\", 0.0, AUTHORITY[\"EPSG\",\"8901\"]], \n  UNIT[\"degree\", 0.017453292519943295], \n  AXIS[\"Geodetic longitude\", EAST], \n  AXIS[\"Geodetic latitude\", NORTH], \n  AUTHORITY[\"EPSG\",\"4326\"]]",
                  "srs": "EPSG:4326",
                  "nativeBoundingBox": {
                    "minx": -74.0118315772888,
                    "maxx": -74.00153046439813,
                    "miny": 40.70754683896324,
                    "maxy": 40.719885123828675,
                    "crs": "EPSG:4326"
                  },
                  "latLonBoundingBox": {
                    "minx": -74.0118315772888,
                    "maxx": -74.00857344353275,
                    "miny": 40.70754683896324,
                    "maxy": 40.711945649065406,
                    "crs": "EPSG:4326"
                  },
                  "projectionPolicy": "REPROJECT_TO_DECLARED",
                  "enabled": true,
                  "metadata": {
                    "entry": [
                      {
                        "@key": "kml.regionateStrategy",
                        "$": "external-sorting"
                      },
                      {
                        "@key": "kml.regionateFeatureLimit",
                        "$": "15"
                      },
                      {
                        "@key": "cacheAgeMax",
                        "$": "3000"
                      },
                      {
                        "@key": "cachingEnabled",
                        "$": "true"
                      },
                      {
                        "@key": "kml.regionateAttribute",
                        "$": "NAME"
                      },
                      {
                        "@key": "indexingEnabled",
                        "$": "false"
                      },
                      {
                        "@key": "dirName",
                        "$": "DS_poi_poi"
                      }
                    ]
                  },
                  "store": {
                    "@class": "dataStore",
                    "name": "tiger:nyc",
                    "href": "http://localhost:8080/geoserver/rest/workspaces/tiger/datastores/nyc.json"
                  },
                  "cqlFilter": "INCLUDE",
                  "maxFeatures": 100,
                  "numDecimals": 6,
                  "responseSRS": {
                    "string": [
                      4326
                    ]
                  },
                  "overridingServiceSRS": true,
                  "skipNumberMatched": true,
                  "circularArcPresent": true,
                  "linearizationTolerance": 10,
                  "attributes": {
                    "attribute": [
                      {
                        "name": "the_geom",
                        "minOccurs": 0,
                        "maxOccurs": 1,
                        "nillable": true,
                        "binding": "com.vividsolutions.jts.geom.Point"
                      },
                      {
                        "name": "NAME",
                        "minOccurs": 0,
                        "maxOccurs": 1,
                        "nillable": true,
                        "binding": "java.lang.String",
                        "length": 6
                      },
                      {
                        "name": "THUMBNAIL",
                        "minOccurs": 0,
                        "maxOccurs": 1,
                        "nillable": true,
                        "binding": "java.lang.String",
                        "length": 20
                      },
                      {
                        "name": "MAINPAGE",
                        "minOccurs": 0,
                        "maxOccurs": 1,
                        "nillable": true,
                        "binding": "java.lang.String",
                        "length": 19
                      }
                    ]
                  }              
              }
            application/xml: |
              <featureType>
                    <name>poi</name>
                    <nativeName>poi</nativeName>
                    <namespace>
                            <name>tiger</name>
                            <atom:link xmlns:atom="http://www.w3.org/2005/Atom" rel="alternate" href="http://localhost:8080/geoserver/rest/namespaces/tiger.xml" type="application/xml"/>
                    </namespace>
                    <title>Manhattan (NY) points of interest</title>
                    <abstract>Points of interest in New York, New York (on Manhattan). One of the attributes contains the name of a file with a picture of the point of interest.</abstract>
                    <keywords>
                            <string>poi</string>
                            <string>Manhattan</string>
                            <string>DS_poi</string>
                            <string>points_of_interest</string>
                            <string>fred\@language=ab\;</string>
                            <string>area of effect\@language=bg\;\@vocabulary=Technical\;</string>
                            <string>ÐŸÑ€Ð¸Ð²ÐµÑ‚\@language=ru\;\@vocabulary=Friendly\;</string>
                    </keywords>
                    <metadataLinks>
                            <metadataLink>
                                  <type>text/plain</type>
                                  <metadataType>FGDC</metadataType>
                                  <content>http://www.google.com</content>
                            </metadataLink>
                    </metadataLinks>
                    <dataLinks>
                            <org.geoserver.catalog.impl.DataLinkInfoImpl>
                                  <type>text/plain</type>
                                  <content>http://www.google.com</content>
                            </org.geoserver.catalog.impl.DataLinkInfoImpl>
                    </dataLinks>
                    <nativeCRS>GEOGCS["WGS 84", DATUM["World Geodetic System 1984", SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], AUTHORITY["EPSG","6326"]], PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], UNIT["degree", 0.017453292519943295], AXIS["Geodetic longitude", EAST], AXIS["Geodetic latitude", NORTH], AUTHORITY["EPSG","4326"]]</nativeCRS>
                    <srs>EPSG:4326</srs>
                    <nativeBoundingBox>
                            <minx>-74.0118315772888</minx>
                            <maxx>-74.00153046439813</maxx>
                            <miny>40.70754683896324</miny>
                            <maxy>40.719885123828675</maxy>
                            <crs>EPSG:4326</crs>
                    </nativeBoundingBox>
                    <latLonBoundingBox>
                            <minx>-74.0118315772888</minx>
                            <maxx>-74.00857344353275</maxx>
                            <miny>40.70754683896324</miny>
                            <maxy>40.711945649065406</maxy>
                            <crs>EPSG:4326</crs>
                    </latLonBoundingBox>
                    <projectionPolicy>NONE</projectionPolicy>
                    <enabled>true</enabled>
                    <metadata>
                            <entry key="kml.regionateStrategy">external-sorting</entry>
                            <entry key="elevation">
                                  <dimensionInfo>
                                          <enabled>false</enabled>
                                  </dimensionInfo>
                            </entry>
                            <entry key="kml.regionateFeatureLimit">15</entry>
                            <entry key="cacheAgeMax">3000</entry>
                            <entry key="time">
                                  <dimensionInfo>
                                          <enabled>false</enabled>
                                          <defaultValue/>
                                  </dimensionInfo>
                            </entry>
                            <entry key="cachingEnabled">true</entry>
                            <entry key="kml.regionateAttribute">NAME</entry>
                            <entry key="indexingEnabled">false</entry>
                            <entry key="dirName">DS_poi_poi</entry>
                    </metadata>
                    <store class="dataStore">
                            <name>tiger:nyc</name>
                            <atom:link xmlns:atom="http://www.w3.org/2005/Atom" rel="alternate" href="http://localhost:8080/geoserver/rest/workspaces/tiger/datastores/nyc.xml" type="application/xml"/>
                    </store>
                    <cqlFilter>INCLUDE</cqlFilter>
                    <maxFeatures>100</maxFeatures>
                    <numDecimals>6</numDecimals>
                    <responseSRS>
                            <string>4326</string>
                    </responseSRS>
                    <overridingServiceSRS>true</overridingServiceSRS>
                    <skipNumberMatched>true</skipNumberMatched>
                    <circularArcPresent>true</circularArcPresent>
                    <linearizationTolerance>10</linearizationTolerance>
                    <attributes>
                            <attribute>
                                  <name>the_geom</name>
                                  <minOccurs>0</minOccurs>
                                  <maxOccurs>1</maxOccurs>
                                  <nillable>true</nillable>
                                  <binding>com.vividsolutions.jts.geom.Point</binding>
                            </attribute>
                            <attribute>
                                  <name>NAME</name>
                                  <minOccurs>0</minOccurs>
                                  <maxOccurs>1</maxOccurs>
                                  <nillable>true</nillable>
                                  <binding>java.lang.String</binding>
                                  <length>6</length>
                            </attribute>
                            <attribute>
                                  <name>THUMBNAIL</name>
                                  <minOccurs>0</minOccurs>
                                  <maxOccurs>1</maxOccurs>
                                  <nillable>true</nillable>
                                  <binding>java.lang.String</binding>
                                  <length>20</length>
                            </attribute>
                            <attribute>
                                  <name>MAINPAGE</name>
                                  <minOccurs>0</minOccurs>
                                  <maxOccurs>1</maxOccurs>
                                  <nillable>true</nillable>
                                  <binding>java.lang.String</binding>
                                  <length>19</length>
                            </attribute>
                    </attributes>
              </featureType>
    put:
      description: >-
        Update an individual feature type in the default data store for the
        workspace
      consumes:
        - application/xml
        - text/xml
        - application/json
        - text/json
      parameters:
        - name: workspaceName
          in: path
          description: The name of the workspace
          required: true
          type: string
        - name: featureTypeName
          in: path
          description: The name of the feature type
          required: true
          type: string
        - name: recalculate
          in: query
          description: >-
            Specifies whether to recalculate any bounding boxes for a feature
            type. Some properties of feature types are automatically
            recalculated when necessary. In particular, the native bounding box
            is recalculated when the projection or projection policy are
            changed, and the lat/lon bounding box is recalculated when the
            native bounding box is recalculated, or when a new native bounding
            box is explicitly provided in the request. (The native and lat/lon
            bounding boxes are not automatically recalculated when they are
            explicitly included in the request.) In addition, the client may
            explicitly request a fixed set of fields to calculate, by including
            a comma-separated list of their names in the recalculate parameter. 
            The empty parameter 'recalculate=' is useful avoid slow
            recalculation when operating against large datasets as
            'recalculate=' avoids calculating any fields, regardless of any
            changes to projection, projection policy, etc. The nativebbox
            parameter 'recalculate=nativebbox' is used recalculates the native
            bounding box, while avoiding recalculating the lat/lon bounding box.
            Recalculate parameters can be used in together -
            'recalculate=nativebbox,latlonbbox' can be used after a bulk import
            to  to recalculates both the native bounding box and the lat/lon
            bounding box.
          required: false
          type: array
          collectionFormat: csv
          minItems: 0
          maxItems: 2
          items:
            type: string
            enum:
              - nativebbox
              - latlonbbox
        - name: featureType
          in: body
          description: The body of the feature type to POST
          required: true
          schema:
            $ref: '#/definitions/FeatureTypeInfo'
      responses:
        '200':
          description: The feature type was successfully updated.
    delete:
      description: >-
        Delete a feature type in the default data store for the workspace
        (optionally recursively deleting layers).
      parameters:
        - name: workspaceName
          in: path
          description: The name of the workspace
          required: true
          type: string
        - name: featureTypeName
          in: path
          description: The name of the feature type
          required: true
          type: string
        - name: recurse
          in: query
          description: >-
            Recursively deletes all layers referenced by the specified
            featuretype. Allowed values for this parameter are true or false.
            The default value is false. A request with 'recurse=false' will fail
            if any layers reference the featuretype.
          required: false
          type: boolean
          default: false
      responses:
        '200':
          description: The feature type was successfully deleted.
  /fonts:
    get:
      operationId: getFonts
      summary: Get a list of fonts
      description: >-
        Displays a list of all fonts on the server. You must use the "Accept:"
        header to specify format or append an extension to the endpoint (example
        "/fonts.xml" for XML)
      produces:
        - application/json
        - application/xml
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/FontList'
          examples:
            application/json: >
              {"fonts":["Calibri Light Italic","Microsoft PhagsPa Bold","Lucida
              Sans Typewriter Oblique","ChaparralPro-Regular","Californian FB
              Italic"]}
            application/xml: |
              <root>
                <fonts>
                  <entry>Calibri Light Italic</entry>
                  <entry>Microsoft PhagsPa Bold</entry>
                  <entry>Lucida Sans Typewriter Oblique</entry>
                  <entry>ChaparralPro-Regular</entry>
                  <entry>Californian FB Italic</entry>
                </fonts>
              </root>
        '401':
          description: Unauthorized
  /layergroups:
    get:
      operationId: getLayergroups
      summary: Get a list of layer groups
      description: Displays a list of all layer groups on the server not otherwise in a workspace. Use the "Accept:" header to specify format or append an extension to the endpoint (example "/layergroups.xml" for XML)
      produces:
        - application/xml
        - application/json
        - text/html
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/LayergroupResponse"
          examples:
            application/xml: |
              <layerGroups>
                <layerGroup>
                  <name>spearfish</name>
                  <atom:link xmlns:atom="http://www.w3.org/2005/Atom" rel="alternate" href="http://localhost:8080/geoserver/rest/layergroups/spearfish.xml" type="application/xml"/>
                </layerGroup>
              </layerGroups>
            
            application/json: |
              {"layerGroups":{"layerGroup":[{"name":"spearfish","href":"http:\/\/localhost:8080\/geoserver\/rest\/layergroups\/spearfish.json"},{"name":"tasmania","href":"http:\/\/localhost:8080\/geoserver\/rest\/layergroups\/tasmania.json"},{"name":"tiger-ny","href":"http:\/\/localhost:8080\/geoserver\/rest\/layergroups\/tiger-ny.json"}]}}
            
    post:
      operationId: postLayergroups
      summary: Add a new layer group
      description: Adds a new layer group entry to the server.

      parameters:
        - name: layergroupBody
          description: The layer group body information to upload.
          in: body
          required: true          
          schema:
            $ref: "#/definitions/Layergroup"
      consumes:
        - application/xml
        - application/json
      responses:
        201:
          description: Created
          schema:
            type: string
          headers:
            Location:
              description: URL where the newly created layer group can be found
              type: string

    put:
      operationId: putLayergroups
      description: Invalid. Use POST for adding a new layer group, or PUT on /layergroups/{layergroup} to edit an existing layer group.
      responses:
        405:
          description: Method Not Allowed

    delete:
      operationId: deleteLayergroups
      description: Invalid. Use /layergroups/{layergroup} instead.
      responses:
        405:
          description: Method Not Allowed

  /layergroups/{layergroupName}:
    get:
      operationId: getLayergroup
      summary: Retrieve a layer group
      description: Retrieves a single layer group definition. Use the "Accept:" header to specify format or append an extension to the endpoint (example "/layergroups/{layergroup}.xml" for XML).
      produces:
        - application/xml
        - application/json
        - text/html
      parameters:
        - name: layergroupName
          in: path
          required: true
          description: The name of the layer group to retrieve.
          type: string       
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/Layergroup"
          examples:
            application/xml: |
              <layerGroup>
                <name>spearfish</name>
                <mode>SINGLE</mode>
                <title>Spearfish</title>
                <abstractTxt>Spearfish City in Lawrence County, South Dakota</abstractTxt>
                <publishables>
                  <published type="layer">
                    <name>sfdem</name>
                    <atom:link xmlns:atom="http://www.w3.org/2005/Atom" rel="alternate" href="http://localhost:8080/geoserver/rest/layers/sfdem.xml" type="application/xml"/>
                  </published>
                  <published type="layer">
                    <name>streams</name>
                    <atom:link xmlns:atom="http://www.w3.org/2005/Atom" rel="alternate" href="http://localhost:8080/geoserver/rest/layers/streams.xml" type="application/xml"/>
                  </published>
                </publishables>
                <styles>
                  <style>
                    <name>dem</name>
                      <atom:link xmlns:atom="http://www.w3.org/2005/Atom" rel="alternate" href="http://localhost:8080/geoserver/rest/styles/dem.xml" type="application/xml"/>
                  <style/>
                </styles>
                <bounds>
                  <minx>589425.9342365642</minx>
                  <maxx>609518.6719560538</maxx>
                  <miny>4913959.224611808</miny>
                  <maxy>4928082.949945881</maxy>
                  <crs class="projected">EPSG:26713</crs>
                </bounds>
                <metadata>
                  <entry key="rawStyleList"></entry>
                </metadata>
                <keywords>
                  <keyword>keyword1\@language=en\;\@vocabulary=vocabulary1\;</keyword>
                  <keyword>keyword2\@language=pt\;\@vocabulary=vocabulary2\;</keyword>
                </keywords>
              </layerGroup>
              
            application/json: |
              {"layerGroup": { 
                "name":"spearfish",
                "mode":"SINGLE",
                "title":"Spearfish",
                "abstractTxt":"Spearfish City in Lawrence County, South Dakota",
                "publishables":{"published":[
                    {"@type":"layer",
                    "name":"sfdem",
                    "href":"http://localhost:8080/geoserver/rest/layers/sfdem.json"},
                    {"@type":"layer",
                    "name":"streams",
                    "href":"http://localhost:8080/geoserver/rest/layers/streams.json"}]},
                "styles": {"style":[
                    {"name":"dem",
                    "href":"http://localhost:8080/geoserver/rest/styles/dem.json"},
                    "null"]},
                "bounds": { "minx":589425.9342365642,
                            "maxx":609518.6719560538,
                            "miny":4913959.224611808,
                            "maxy":4928082.949945881,
                            "crs":{"@class":"projected","$":"EPSG:26713"}},
                "metadata":{"entry":{"@key":"rawStyleList","$":""}}
                }
              }
              
    put:
      operationId: putLayergroup
      summary: Modify a layer group.
      description: Modifies an existing layer group on the server. Use the "Accept:" header to specify format or append an extension to the endpoint (example "/layergroups/{layergroup}.xml" for XML).
      parameters:
        - name: layergroupName
          in: path
          required: true
          description: The name of the layer group to modify.
          type: string
        - name: layergroupBody
          in: body
          description: The updated layer group definition.
          required: true
          schema:
            $ref: "#/definitions/Layergroup"
      consumes:
        - application/xml
        - application/json
      responses:
        200:
          description: The layer group was successfully updated.

    delete:
      operationId: deleteLayergroup
      summary: Delete layer group
      description: Deletes a layer group from the server.
      parameters:
        - name: layergroupName
          in: path
          required: true
          description: The name of the layer group to delete.
          type: string
      responses:
        200:
          description: OK


  /workspaces/{workspace}/layergroups:
    get:
      operationId: getWorkspaceLayergroups
      summary: Get a list of layer groups in a workspace
      description: Displays a list of all layer groups in a given workspace. Use the "Accept:" header to specify format or append an extension to the endpoint (example "/layergroups.xml" for XML).
      produces:
        - application/xml
        - application/json
        - text/html
      parameters:
        - $ref: "#/parameters/Workspace"
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/LayergroupResponse"
          examples:
            application/xml: '
              <layerGroups>
                <layerGroup>
                  <name>spearfish</name>
                  <atom:link xmlns:atom="http://www.w3.org/2005/Atom" rel="alternate" href="http://localhost:8080/geoserver/rest/workspaces/sf/layergroups/spearfish.xml" type="application/xml"/>
                </layerGroup>
              </layerGroups>
            '
            application/json: '
              {"layerGroups":{"layerGroup":[{"name":"spearfish","href":"http:\/\/localhost:8080\/geoserver\/rest\/workspaces\/sf\/layergroups\/spearfish.json"}]}}
            '
    post:
      operationId: postWorkspaceLayergroups
      summary: Add a new layer group
      description: Adds a new layer group entry to the server in the specified workspace.

      parameters:
        - $ref: "#/parameters/Workspace" 
        - name: layergroupBody
          description: The layer group body information to upload.
          in: body
          required: true          
          schema:
            $ref: "#/definitions/Layergroup"
      consumes:
        - application/xml
        - application/json
      responses:
        201:
          description: Created
          schema:
            type: string
          headers:
            Location:
              description: URL where the newly created layer group can be found
              type: string

  /workspaces/{workspace}/layergroups/{layergroup}:
    get:
      operationId: getWorkspaceLayergroup
      summary: Retrieve a layer group
      description: Retrieves a single layer group definition. Use the "Accept:" header to specify format or append an extension to the endpoint (example "/workspaces/{workspace}/layergroups/{layergroup}.xml" for XML).
      produces:
        - application/xml
        - application/json
        - text/html
      parameters:
        - $ref: "#/parameters/Workspace"      
        - name: layergroup
          in: path
          required: true
          description: The name of the layer group to retrieve.
          type: string           
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/Layergroup"
          examples:
            application/json: |
              {"layerGroup":{"name":"spearfish","mode":"SINGLE","title":"Spearfish","abstractTxt":"Spearfish City in Lawrence County, South Dakota","workspace":{"name":"sf"},"publishables":{"published":[{"@type":"layer","name":"sfdem","href":"http://localhost:8080/geoserver/rest/layers/sfdem.json"},{"@type":"layer","name":"streams","href":"http://localhost:8080/geoserver/rest/layers/streams.json"}]},"styles":{"style":[{"name":"dem","href":"http://localhost:8080/geoserver/rest/styles/dem.json"},"null"]},"bounds":{"minx":589425.9342365642,"maxx":609518.6719560538,"miny":4913959.224611808,"maxy":4928082.949945881,"crs":{"@class":"projected","$":"EPSG:26713"}},"metadata":{"entry":{"@key":"rawStyleList","$":""}}}}
              
            application/xml: |
              <layerGroup>
                <name>spearfish</name>
                <mode>SINGLE</mode>
                <title>Spearfish</title>
                <abstractTxt>Spearfish City in Lawrence County, South Dakota</abstractTxt>
                <workspace>
                  <name>sf</name>
                </workspace>
                <publishables>
                  <published type="layer">
                    <name>sfdem</name>
                    <atom:link xmlns:atom="http://www.w3.org/2005/Atom" rel="alternate" href="http://localhost:8080/geoserver/rest/layers/sfdem.xml" type="application/xml"/>
                  </published>
                  <published type="layer">
                    <name>streams</name>
                    <atom:link xmlns:atom="http://www.w3.org/2005/Atom" rel="alternate" href="http://localhost:8080/geoserver/rest/layers/streams.xml" type="application/xml"/>
                  </published>
                </publishables>
                <styles>
                  <style>
                    <name>dem</name>
                      <atom:link xmlns:atom="http://www.w3.org/2005/Atom" rel="alternate" href="http://localhost:8080/geoserver/rest/styles/dem.xml" type="application/xml"/>
                  <style/>
                </styles>
                <bounds>
                  <minx>589425.9342365642</minx>
                  <maxx>609518.6719560538</maxx>
                  <miny>4913959.224611808</miny>
                  <maxy>4928082.949945881</maxy>
                  <crs class="projected">EPSG:26713</crs>
                </bounds>
                <metadata>
                  <entry key="rawStyleList"></entry>
                </metadata>
              </layerGroup>              

    put:
      operationId: putWorkspaceLayergroup
      summary: Modify a layer group.
      description: Modifies an existing layer group on the server in the given workspace. Use the "Accept:" header to specify format or append an extension to the endpoint (example "/workspaces/{workspace}/layergroups/{layergroup}.xml" for XML).
      parameters:
        - $ref: "#/parameters/Workspace"
        - name: layergroup
          in: path
          required: true
          description: The name of the layer group to modify.
          type: string
        - name: layergroupBody
          in: body
          description: The updated layer group definition.
          required: true
          schema:
            $ref: "#/definitions/Layergroup"
      consumes:
        - application/xml
        - application/json
      responses:
        200:
          description: The layer group was successfully updated.

    delete:
      operationId: deleteWorkspaceLayergroup
      summary: Delete layer group
      description: Deletes a layer group from the server in the given workspace.
      parameters:
        - name: layergroup
          in: path
          required: true
          description: The name of the layer group to delete.
          type: string
        - $ref: "#/parameters/Workspace"
      responses:
        200:
          description: OK

parameters:
  dataStorePost:
    name: dataStoreBody
    description: >
      The data store body information to upload.


      The contents of the connection parameters will differ depending on the
      type of data store being added.


      - GeoPackage

        Examples:
        - application/xml:

          ```
          <dataStore>
            <name>nyc</name>
            <connectionParameters>
              <database>file:///path/to/nyc.gpkg</database>
              <dbtype>geopkg</dbtype>
            </connectionParameters>
          </dataStore>
          ```

        - application/json:

          ```
          {
            "dataStore": {
              "name": "nyc",
              "connectionParameters": {
                "entry": [
                  {"@key":"database","$":"file:///path/to/nyc.gpkg"},
                  {"@key":"dbtype","$":"geopkg"}
                ]
              }
            }
          }
          ```

        Connection Parameters:

        | key | description | level | type | required | default |
        | --- | ----------- | ----- | ---- | -------- | ------- |
        | Primary key metadata table | The optional table containing primary key structure and sequence associations. Can be expressed as 'schema.name' or just 'name' | user | String | False | ` ` |
        | Callback factory | Name of JDBCReaderCallbackFactory to enable on the data store | user | String | False | ` ` |
        | Evictor tests per run | number of connections checked by the idle connection evictor for each of its runs (defaults to 3) | user | Integer | False | `3` |
        | database | Database | user | File | True | ` ` |
        | Batch insert size | Number of records inserted in the same batch (default, 1). For optimal performance, set to 100. | user | Integer | False | `1` |
        | fetch size | number of records read with each iteraction with the dbms | user | Integer | False | `1000` |
        | Connection timeout | number of seconds the connection pool will wait before timing out attempting to get a new connection (default, 20 seconds) | user | Integer | False | `20` |
        | namespace | Namespace prefix | user | String | False | ` ` |
        | max connections | maximum number of open connections | user | Integer | False | `10` |
        | Test while idle | Periodically test the connections are still valid also while idle in the pool | user | Boolean | False | `True` |
        | Max connection idle time | number of seconds a connection needs to stay idle for the evictor to consider closing it | user | Integer | False | `300` |
        | Session startup SQL | SQL statement executed when the connection is grabbed from the pool | user | String | False | ` ` |
        | validate connections | check connection is alive before using it | user | Boolean | False | `True` |
        | dbtype | Type | program | String | True | `geopkg` |
        | passwd | password used to login | user | String | False | ` ` |
        | Expose primary keys | Expose primary key columns as attributes of the feature type | user | Boolean | False | `False` |
        | min connections | minimum number of pooled connection | user | Integer | False | `1` |
        | Evictor run periodicity | number of seconds between idle object evitor runs (default, 300 seconds) | user | Integer | False | `300` |
        | Session close-up SQL | SQL statement executed when the connection is released to the pool | user | String | False | ` ` |
        | user | user name to login as | user | String | False | ` ` |

      - PostGIS

        Examples:
        - application/xml:

          ```
          <dataStore>
            <name>nyc</name>
            <connectionParameters>
              <host>localhost</host>
              <port>5432</port>
              <database>nyc</database>
              <user>bob</user>
              <passwd>postgres</passwd>
              <dbtype>postgis</dbtype>
            </connectionParameters>
          </dataStore>
          ```

        - application/json:

          ```
          {
            "dataStore": {
              "name": "nyc",
              "connectionParameters": {
                "entry": [
                  {"@key":"host","$":"localhost"},
                  {"@key":"port","$":"5432"},
                  {"@key":"database","$":"nyc"},
                  {"@key":"user","$":"bob"},
                  {"@key":"passwd","$":"postgres"},
                  {"@key":"dbtype","$":"postgis"}
                ]
              }
            }
          }
          ```

        Connection Parameters:

        | key | description | level | type | required | default |
        | --- | ----------- | ----- | ---- | -------- | ------- |
        | Connection timeout | number of seconds the connection pool will wait before timing out attempting to get a new connection (default, 20 seconds) | user | Integer | False | `20` |
        | validate connections | check connection is alive before using it | user | Boolean | False | `True` |
        | port | Port | user | Integer | True | `5432` |
        | Primary key metadata table | The optional table containing primary key structure and sequence associations. Can be expressed as 'schema.name' or just 'name' | user | String | False | ` ` |
        | Support on the fly geometry simplification | When enabled, operations such as map rendering will pass a hint that will enable the usage of ST_Simplify | user | Boolean | False | `True` |
        | create database | Creates the database if it does not exist yet | advanced | Boolean | False | `False` |
        | create database params | Extra specifications appeneded to the CREATE DATABASE command | advanced | String | False | `` |
        | dbtype | Type | program | String | True | `postgis` |
        | Batch insert size | Number of records inserted in the same batch (default, 1). For optimal performance, set to 100. | user | Integer | False | `1` |
        | namespace | Namespace prefix | user | String | False | ` ` |
        | Max connection idle time | number of seconds a connection needs to stay idle for the evictor to consider closing it | user | Integer | False | `300` |
        | Session startup SQL | SQL statement executed when the connection is grabbed from the pool | user | String | False | ` ` |
        | Expose primary keys | Expose primary key columns as attributes of the feature type | user | Boolean | False | `False` |
        | min connections | minimum number of pooled connection | user | Integer | False | `1` |
        | Max open prepared statements | Maximum number of prepared statements kept open and cached for each connection in the pool. Set to 0 to have unbounded caching, to -1 to disable caching | user | Integer | False | `50` |
        | Callback factory | Name of JDBCReaderCallbackFactory to enable on the data store | user | String | False | ` ` |
        | passwd | password used to login | user | String | False | ` ` |
        | encode functions | set to true to have a set of filter functions be translated directly in SQL. Due to differences in the type systems the result might not be the same as evaluating them in memory, including the SQL failing with errors while the in memory version works fine. However this allows to push more of the filter into the database, increasing performance.the postgis table. | advanced | Boolean | False | `False` |
        | host | Host | user | String | True | `localhost` |
        | Evictor tests per run | number of connections checked by the idle connection evictor for each of its runs (defaults to 3) | user | Integer | False | `3` |
        | Loose bbox | Perform only primary filter on bbox | user | Boolean | False | `True` |
        | Evictor run periodicity | number of seconds between idle object evitor runs (default, 300 seconds) | user | Integer | False | `300` |
        | Estimated extends | Use the spatial index information to quickly get an estimate of the data bounds | user | Boolean | False | `True` |
        | database | Database | user | String | False | ` ` |
        | fetch size | number of records read with each iteraction with the dbms | user | Integer | False | `1000` |
        | Test while idle | Periodically test the connections are still valid also while idle in the pool | user | Boolean | False | `True` |
        | max connections | maximum number of open connections | user | Integer | False | `10` |
        | preparedStatements | Use prepared statements | user | Boolean | False | `False` |
        | Session close-up SQL | SQL statement executed when the connection is released to the pool | user | String | False | ` ` |
        | schema | Schema | user | String | False | `public` |
        | user | user name to login as | user | String | True | ` ` |

      - Shapefile

        Examples:
        - application/xml:

          ```
          <dataStore>
            <name>nyc</name>
            <connectionParameters>
              <url>file:/path/to/nyc.shp</database>
            </connectionParameters>
          </dataStore>
          ```

        - application/json:

          ```
          {
            "dataStore": {
              "name": "nyc",
              "connectionParameters": {
                "entry": [
                  {"@key":"url","$":"file:/path/to/nyc.shp"}
                ]
              }
            }
          }
          ```

        Connection Parameters:

        | key | description | level | type | required | default |
        | --- | ----------- | ----- | ---- | -------- | ------- |
        | cache and reuse memory maps | only memory map a file one, then cache and reuse the map | advanced | Boolean | False | `True` |
        | namespace | uri to a the namespace | advanced | URI | False | ` ` |
        | filetype | Discriminator for directory stores | program | String | False | `shapefile` |
        | charset | character used to decode strings from the DBF file | advanced | Charset | False | `ISO-8859-1` |
        | create spatial index | enable/disable the automatic creation of spatial index | advanced | Boolean | False | `True` |
        | fstype | Enable using a setting of 'shape'. | advanced | String | False | `shape` |
        | url | url to a .shp file | user | URL | True | ` ` |
        | enable spatial index | enable/disable the use of spatial index for local shapefiles | advanced | Boolean | False | `True` |
        | memory mapped buffer | enable/disable the use of memory-mapped io | advanced | Boolean | False | `False` |
        | timezone | time zone used to read dates from the DBF file | advanced | TimeZone | False | `Pacific Standard Time` |

      - Directory of spatial files (shapefiles)

        Examples:
        - application/xml:

          ```
          <dataStore>
            <name>nyc</name>
            <connectionParameters>
              <url>file:/path/to/directory</database>
            </connectionParameters>
          </dataStore>
          ```

        - application/json:

          ```
          {
            "dataStore": {
              "name": "nyc",
              "connectionParameters": {
                "entry": [
                  {"@key":"url","$":"file:/path/to/directory"}
                ]
              }
            }
          }
          ```

        Connection Parameters:

        | key | description | level | type | required | default |
        | --- | ----------- | ----- | ---- | -------- | ------- |
        | cache and reuse memory maps | only memory map a file one, then cache and reuse the map | advanced | Boolean | False | `True` |
        | namespace | uri to a the namespace | advanced | URI | False | ` ` |
        | filetype | Discriminator for directory stores | program | String | False | `shapefile` |
        | charset | character used to decode strings from the DBF file | advanced | Charset | False | `ISO-8859-1` |
        | create spatial index | enable/disable the automatic creation of spatial index | advanced | Boolean | False | `True` |
        | fstype | Enable using a setting of 'shape'. | advanced | String | False | `shape` |
        | url | url to a .shp file | user | URL | True | ` ` |
        | enable spatial index | enable/disable the use of spatial index for local shapefiles | advanced | Boolean | False | `True` |
        | memory mapped buffer | enable/disable the use of memory-mapped io | advanced | Boolean | False | `False` |
        | timezone | time zone used to read dates from the DBF file | advanced | TimeZone | False | `Pacific Standard Time` |


      - Web Feature Service

        Examples:
        - application/xml:

          ```
          <dataStore>
            <name>nyc</name>
            <connectionParameters>
              <GET_CAPABILITIES_URL>http://localhost:8080/geoserver/wfs?request=GetCapabilities</GET_CAPABILITIES_URL>
            </connectionParameters>
          </dataStore>
          ```

        - application/json:

          ```
          {
            "dataStore": {
              "name": "nyc",
              "connectionParameters": {
                "entry": [
                  {"@key":"GET_CAPABILITIES_URL","$":"http://localhost:8080/geoserver/wfs?request=GetCapabilities"}
                ]
              }
            }
          }
          ```

        Connection Parameters:

        | key | description | level | type | required | default |
        | --- | ----------- | ----- | ---- | -------- | ------- |
        | Protocol | Sets a preference for the HTTP protocol to use when requesting WFS functionality. Set this value to Boolean.TRUE for POST, Boolean.FALSE for GET or NULL for AUTO | user | Boolean | False | ` ` |
        | WFS GetCapabilities URL | Represents a URL to the getCapabilities document or a server instance. | user | URL | False | ` ` |
        | Buffer Size | This allows the user to specify a buffer size in features. This param has a default value of 10 features. | user | Integer | False | `10` |
        | Filter compliance | Level of compliance to WFS specification (0-low,1-medium,2-high) | user | Integer | False | ` ` |
        | EntityResolver | Sets the entity resolver used to expand XML entities | program | EntityResolver | False | `org.geotools.xml.PreventLocalEntityResolver@75e98519` |
        | Time-out | This allows the user to specify a timeout in milliseconds. This param has a default value of 3000ms. | user | Integer | False | `3000` |
        | GmlComplianceLevel | Optional OGC GML compliance level required. | user | Integer | False | `0` |
        | Lenient | Indicates that datastore should do its best to create features from the provided data even if it does not accurately match the schema.  Errors will be logged but the parsing will continue if this is true.  Default is false | user | Boolean | False | `False` |
        | Password | This allows the user to specify a username. This param should not be used without the USERNAME param. | user | String | False | ` ` |
        | Use Default SRS | Use always the declared DefaultSRS for requests and reproject locally if necessary | advanced | Boolean | False | `False` |
        | Namespace | Override the original WFS type name namespaces | advanced | String | False | ` ` |
        | Username | This allows the user to specify a username. This param should not be used without the PASSWORD param. | user | String | False | ` ` |
        | Axis Order Filter | Indicates axis order used by the remote WFS server for filters. It applies only to WFS 1.x.0 servers. Default is the same as AXIS_ORDER | advanced | String | False | ` ` |
        | GmlCompatibleTypeNames | Use Gml Compatible TypeNames (replace : by _). | user | Boolean | False | `False` |
        | Maximum features | Positive integer used as a hard limit for the amount of Features to retrieve for each FeatureType. A value of zero or not providing this parameter means no limit. | user | Integer | False | `0` |
        | Axis Order | Indicates axis order used by the remote WFS server in result coordinates. It applies only to WFS 1.x.0 servers. Default is Compliant | advanced | String | False | `Compliant` |
        | WFS Strategy | Override wfs stragegy with either cubwerx, ionic, mapserver, geoserver, strict, nonstrict or arcgis strategy. | user | String | False | `auto` |
        | Try GZIP | Indicates that datastore should use gzip to transfer data if the server supports it. Default is true | user | Boolean | False | `True` |
        | Encoding | This allows the user to specify the character encoding of the XML-Requests sent to the Server. Defaults to UTF-8 | user | String | False | `UTF-8` |
        | Outputformat | This allows the user to specify an outputFormat, different from the default one. | advanced | String | False | ` ` |
    in: body
    required: true
    schema:
      $ref: '#/definitions/datastore'
  dataStorePut:
    name: dataStoreBody
    description: >
      The updated data store definition.

      For a PUT, only values which should be changed need to be included. The
      connectionParameters map counts as a single value, 

      so if you change it all preexisting connection parameters will be
      overwritten.


      The contents of the connection parameters will differ depending on the
      type of data store being added.


      - GeoPackage

        Examples:
        - application/xml:

          ```
          <dataStore>
            <description>A data store</description>
            <enabled>true</enabled>
            <__default>true</__default>
            <connectionParameters>
              <database>file:///path/to/nyc.gpkg</database>
            </connectionParameters>
          </dataStore>
          ```

        - application/json:

          ```
          {
            "dataStore": {
              "description": "A data store",
              "enabled": "true",
              "_default": "true",
              "connectionParameters": {
                "entry": [
                  {"@key":"database","$":"file:///path/to/nyc.gpkg"},
                ]
              }
            }
          }
          ```

        Connection Parameters:

        | key | description | level | type | required | default |
        | --- | ----------- | ----- | ---- | -------- | ------- |
        | Primary key metadata table | The optional table containing primary key structure and sequence associations. Can be expressed as 'schema.name' or just 'name' | user | String | False | ` ` |
        | Callback factory | Name of JDBCReaderCallbackFactory to enable on the data store | user | String | False | ` ` |
        | Evictor tests per run | number of connections checked by the idle connection evictor for each of its runs (defaults to 3) | user | Integer | False | `3` |
        | database | Database | user | File | True | ` ` |
        | Batch insert size | Number of records inserted in the same batch (default, 1). For optimal performance, set to 100. | user | Integer | False | `1` |
        | fetch size | number of records read with each iteraction with the dbms | user | Integer | False | `1000` |
        | Connection timeout | number of seconds the connection pool will wait before timing out attempting to get a new connection (default, 20 seconds) | user | Integer | False | `20` |
        | namespace | Namespace prefix | user | String | False | ` ` |
        | max connections | maximum number of open connections | user | Integer | False | `10` |
        | Test while idle | Periodically test the connections are still valid also while idle in the pool | user | Boolean | False | `True` |
        | Max connection idle time | number of seconds a connection needs to stay idle for the evictor to consider closing it | user | Integer | False | `300` |
        | Session startup SQL | SQL statement executed when the connection is grabbed from the pool | user | String | False | ` ` |
        | validate connections | check connection is alive before using it | user | Boolean | False | `True` |
        | dbtype | Type | program | String | True | `geopkg` |
        | passwd | password used to login | user | String | False | ` ` |
        | Expose primary keys | Expose primary key columns as attributes of the feature type | user | Boolean | False | `False` |
        | min connections | minimum number of pooled connection | user | Integer | False | `1` |
        | Evictor run periodicity | number of seconds between idle object evitor runs (default, 300 seconds) | user | Integer | False | `300` |
        | Session close-up SQL | SQL statement executed when the connection is released to the pool | user | String | False | ` ` |
        | user | user name to login as | user | String | False | ` ` |

      - PostGIS

        Examples:
        - application/xml:

          ```
          <dataStore>
            <description>A data store</description>
            <enabled>true</enabled>
            <__default>true</__default>
            <connectionParameters>
              <host>localhost</host>
              <port>5432</port>
              <database>nyc</database>
              <user>bob</user>
              <passwd>postgres</passwd>
            </connectionParameters>
          </dataStore>
          ```

        - application/json:

          ```
          {
            "dataStore": {
              "description": "A data store",
              "enabled": "true",
              "_default": "true",
              "connectionParameters": {
                "entry": [
                  {"@key":"host","$":"localhost"},
                  {"@key":"port","$":"5432"},
                  {"@key":"database","$":"nyc"},
                  {"@key":"user","$":"bob"},
                  {"@key":"passwd","$":"postgres"},
                ]
              }
            }
          }
          ```

        Connection Parameters:

        | key | description | level | type | required | default |
        | --- | ----------- | ----- | ---- | -------- | ------- |
        | Connection timeout | number of seconds the connection pool will wait before timing out attempting to get a new connection (default, 20 seconds) | user | Integer | False | `20` |
        | validate connections | check connection is alive before using it | user | Boolean | False | `True` |
        | port | Port | user | Integer | True | `5432` |
        | Primary key metadata table | The optional table containing primary key structure and sequence associations. Can be expressed as 'schema.name' or just 'name' | user | String | False | ` ` |
        | Support on the fly geometry simplification | When enabled, operations such as map rendering will pass a hint that will enable the usage of ST_Simplify | user | Boolean | False | `True` |
        | create database | Creates the database if it does not exist yet | advanced | Boolean | False | `False` |
        | create database params | Extra specifications appeneded to the CREATE DATABASE command | advanced | String | False | `` |
        | dbtype | Type | program | String | True | `postgis` |
        | Batch insert size | Number of records inserted in the same batch (default, 1). For optimal performance, set to 100. | user | Integer | False | `1` |
        | namespace | Namespace prefix | user | String | False | ` ` |
        | Max connection idle time | number of seconds a connection needs to stay idle for the evictor to consider closing it | user | Integer | False | `300` |
        | Session startup SQL | SQL statement executed when the connection is grabbed from the pool | user | String | False | ` ` |
        | Expose primary keys | Expose primary key columns as attributes of the feature type | user | Boolean | False | `False` |
        | min connections | minimum number of pooled connection | user | Integer | False | `1` |
        | Max open prepared statements | Maximum number of prepared statements kept open and cached for each connection in the pool. Set to 0 to have unbounded caching, to -1 to disable caching | user | Integer | False | `50` |
        | Callback factory | Name of JDBCReaderCallbackFactory to enable on the data store | user | String | False | ` ` |
        | passwd | password used to login | user | String | False | ` ` |
        | encode functions | set to true to have a set of filter functions be translated directly in SQL. Due to differences in the type systems the result might not be the same as evaluating them in memory, including the SQL failing with errors while the in memory version works fine. However this allows to push more of the filter into the database, increasing performance.the postgis table. | advanced | Boolean | False | `False` |
        | host | Host | user | String | True | `localhost` |
        | Evictor tests per run | number of connections checked by the idle connection evictor for each of its runs (defaults to 3) | user | Integer | False | `3` |
        | Loose bbox | Perform only primary filter on bbox | user | Boolean | False | `True` |
        | Evictor run periodicity | number of seconds between idle object evitor runs (default, 300 seconds) | user | Integer | False | `300` |
        | Estimated extends | Use the spatial index information to quickly get an estimate of the data bounds | user | Boolean | False | `True` |
        | database | Database | user | String | False | ` ` |
        | fetch size | number of records read with each iteraction with the dbms | user | Integer | False | `1000` |
        | Test while idle | Periodically test the connections are still valid also while idle in the pool | user | Boolean | False | `True` |
        | max connections | maximum number of open connections | user | Integer | False | `10` |
        | preparedStatements | Use prepared statements | user | Boolean | False | `False` |
        | Session close-up SQL | SQL statement executed when the connection is released to the pool | user | String | False | ` ` |
        | schema | Schema | user | String | False | `public` |
        | user | user name to login as | user | String | True | ` ` |

      - Shapefile

        Examples:
        - application/xml:

          ```
          <dataStore>
            <description>A data store</description>
            <enabled>true</enabled>
            <__default>true</__default>
            <connectionParameters>
              <url>file:/path/to/nyc.shp</database>
            </connectionParameters>
          </dataStore>
          ```

        - application/json:

          ```
          {
            "dataStore": {
              "description": "A data store",
              "enabled": "true",
              "_default": "true",
              "connectionParameters": {
                "entry": [
                  {"@key":"url","$":"file:/path/to/nyc.shp"}
                ]
              }
            }
          }
          ```

        Connection Parameters:

        | key | description | level | type | required | default |
        | --- | ----------- | ----- | ---- | -------- | ------- |
        | cache and reuse memory maps | only memory map a file one, then cache and reuse the map | advanced | Boolean | False | `True` |
        | namespace | uri to a the namespace | advanced | URI | False | ` ` |
        | filetype | Discriminator for directory stores | program | String | False | `shapefile` |
        | charset | character used to decode strings from the DBF file | advanced | Charset | False | `ISO-8859-1` |
        | create spatial index | enable/disable the automatic creation of spatial index | advanced | Boolean | False | `True` |
        | fstype | Enable using a setting of 'shape'. | advanced | String | False | `shape` |
        | url | url to a .shp file | user | URL | True | ` ` |
        | enable spatial index | enable/disable the use of spatial index for local shapefiles | advanced | Boolean | False | `True` |
        | memory mapped buffer | enable/disable the use of memory-mapped io | advanced | Boolean | False | `False` |
        | timezone | time zone used to read dates from the DBF file | advanced | TimeZone | False | `Pacific Standard Time` |

      - Directory of spatial files (shapefiles)

        Examples:
        - application/xml:

          ```
          <dataStore>
            <description>A data store</description>
            <enabled>true</enabled>
            <__default>true</__default>
            <connectionParameters>
              <url>file:/path/to/directory</database>
            </connectionParameters>
          </dataStore>
          ```

        - application/json:

          ```
          {
            "dataStore": {
              "description": "A data store",
              "enabled": "true",
              "_default": "true",
              "connectionParameters": {
                "entry": [
                  {"@key":"url","$":"file:/path/to/directory"}
                ]
              }
            }
          }
          ```

        Connection Parameters:

        | key | description | level | type | required | default |
        | --- | ----------- | ----- | ---- | -------- | ------- |
        | cache and reuse memory maps | only memory map a file one, then cache and reuse the map | advanced | Boolean | False | `True` |
        | namespace | uri to a the namespace | advanced | URI | False | ` ` |
        | filetype | Discriminator for directory stores | program | String | False | `shapefile` |
        | charset | character used to decode strings from the DBF file | advanced | Charset | False | `ISO-8859-1` |
        | create spatial index | enable/disable the automatic creation of spatial index | advanced | Boolean | False | `True` |
        | fstype | Enable using a setting of 'shape'. | advanced | String | False | `shape` |
        | url | url to a .shp file | user | URL | True | ` ` |
        | enable spatial index | enable/disable the use of spatial index for local shapefiles | advanced | Boolean | False | `True` |
        | memory mapped buffer | enable/disable the use of memory-mapped io | advanced | Boolean | False | `False` |
        | timezone | time zone used to read dates from the DBF file | advanced | TimeZone | False | `Pacific Standard Time` |


      - Web Feature Service

        Examples:
        - application/xml:

          ```
          <dataStore>
            <description>A data store</description>
            <enabled>true</enabled>
            <__default>true</__default>
            <connectionParameters>
              <GET_CAPABILITIES_URL>http://localhost:8080/geoserver/wfs?request=GetCapabilities</GET_CAPABILITIES_URL>
            </connectionParameters>
          </dataStore>
          ```

        - application/json:

          ```
          {
            "dataStore": {
              "description": "A data store",
              "enabled": "true",
              "_default": "true",
              "connectionParameters": {
                "entry": [
                  {"@key":"GET_CAPABILITIES_URL","$":"http://localhost:8080/geoserver/wfs?request=GetCapabilities"}
                ]
              }
            }
          }
          ```

        Connection Parameters:

        | key | description | level | type | required | default |
        | --- | ----------- | ----- | ---- | -------- | ------- |
        | Protocol | Sets a preference for the HTTP protocol to use when requesting WFS functionality. Set this value to Boolean.TRUE for POST, Boolean.FALSE for GET or NULL for AUTO | user | Boolean | False | ` ` |
        | WFS GetCapabilities URL | Represents a URL to the getCapabilities document or a server instance. | user | URL | False | ` ` |
        | Buffer Size | This allows the user to specify a buffer size in features. This param has a default value of 10 features. | user | Integer | False | `10` |
        | Filter compliance | Level of compliance to WFS specification (0-low,1-medium,2-high) | user | Integer | False | ` ` |
        | EntityResolver | Sets the entity resolver used to expand XML entities | program | EntityResolver | False | `org.geotools.xml.PreventLocalEntityResolver@75e98519` |
        | Time-out | This allows the user to specify a timeout in milliseconds. This param has a default value of 3000ms. | user | Integer | False | `3000` |
        | GmlComplianceLevel | Optional OGC GML compliance level required. | user | Integer | False | `0` |
        | Lenient | Indicates that datastore should do its best to create features from the provided data even if it does not accurately match the schema.  Errors will be logged but the parsing will continue if this is true.  Default is false | user | Boolean | False | `False` |
        | Password | This allows the user to specify a username. This param should not be used without the USERNAME param. | user | String | False | ` ` |
        | Use Default SRS | Use always the declared DefaultSRS for requests and reproject locally if necessary | advanced | Boolean | False | `False` |
        | Namespace | Override the original WFS type name namespaces | advanced | String | False | ` ` |
        | Username | This allows the user to specify a username. This param should not be used without the PASSWORD param. | user | String | False | ` ` |
        | Axis Order Filter | Indicates axis order used by the remote WFS server for filters. It applies only to WFS 1.x.0 servers. Default is the same as AXIS_ORDER | advanced | String | False | ` ` |
        | GmlCompatibleTypeNames | Use Gml Compatible TypeNames (replace : by _). | user | Boolean | False | `False` |
        | Maximum features | Positive integer used as a hard limit for the amount of Features to retrieve for each FeatureType. A value of zero or not providing this parameter means no limit. | user | Integer | False | `0` |
        | Axis Order | Indicates axis order used by the remote WFS server in result coordinates. It applies only to WFS 1.x.0 servers. Default is Compliant | advanced | String | False | `Compliant` |
        | WFS Strategy | Override wfs stragegy with either cubwerx, ionic, mapserver, geoserver, strict, nonstrict or arcgis strategy. | user | String | False | `auto` |
        | Try GZIP | Indicates that datastore should use gzip to transfer data if the server supports it. Default is true | user | Boolean | False | `True` |
        | Encoding | This allows the user to specify the character encoding of the XML-Requests sent to the Server. Defaults to UTF-8 | user | String | False | `UTF-8` |
        | Outputformat | This allows the user to specify an outputFormat, different from the default one. | advanced | String | False | ` ` |
    in: body
    required: true
    schema:
      $ref: '#/definitions/datastore'
  CoverageStorePost:
    name: coverageStoreBody
    description: |
      The coverage store body information to upload.

      Examples:
      - application/xml:

        ```
        <coverageStore>
          <name>nyc</name>
          <url>file:/path/to/file.tiff</url>
        </coverageStore>
        ```

      - application/json:

        ```
        {
          "coverageStore": {
            "name": "nyc",
            "url": "file:/path/to/file.tiff"
          }
        }
        ```
    in: body
    required: true
    schema:
      $ref: '#/definitions/CoverageStoreInfo'
  CoverageStorePut:
    name: coverageStoreBody
    description: |
      The coverage store body information to upload.
      For a PUT, only values which should be changed need to be included.

      Examples:
      - application/xml:

        ```
        <coverageStore>
          <description>A coverage store</description>
          <enabled>true</enabled>
          <__default>true</__default>
          <url>file:/path/to/file.tiff</url>
        </coverageStore>
        ```

      - application/json:

        ```
        {
          "coverageStore": {
            "description": "A coverage store",
            "enabled": "true",
            "_default": "true",
            "url": "file:/path/to/file.tiff"
          }
        }
        ```
    in: body
    required: true
    schema:
      $ref: '#/definitions/CoverageStoreInfo'
  Workspace:
    name: workspace
    type: string
    in: path
    description: The name of the workspace
    required: true
definitions:
  dataStoreResponse:
    title: datastores
    type: array
    items:
      title: datastore
      type: object
      properties:
        name:
          type: string
          description: Name of data store
        link:
          type: string
          description: URL to data store definition
  datastore:
    title: datastore
    type: object
    properties:
      name:
        type: string
        description: Name of data store
      description:
        type: string
        description: Description of data store
      enabled:
        type: boolean
        description: Whether or not the data store is enabled
      workspace:
        title: workspace
        type: object
        properties:
          name:
            type: string
            description: Name of workspace
          link:
            type: string
            description: URL to workspace definition
      connectionParameters:
        type: array
        items:
          title: entry
          description: connection parameter key-value pair
          type: object
          properties:
            key:
              type: string
              description: Connection parameter key
            value:
              type: string
              description: Connection parameter value
      __default:
        type: boolean
        description: Whether or not the data store is the default data store
      featureTypes:
        type: array
        items:
          type: string
          description: URL to featuretype definition
  CoverageInfo:
    type: object
    properties:
      name:
        type: string
        description: >-
          The name of the resource. This name corresponds to the "published"
          name of the resource.
      nativeName:
        type: string
        description: >-
          The native name of the resource. This name corresponds to the physical
          resource that feature type is derived from -- a shapefile name, a
          database table, etc...
      namespace:
        type: object
        description: >-
          The namespace uri of the resource. Example would be an application
          schema namespace uri.
        properties:
          name:
            type: string
            description: The name of the namespace.
          href:
            type: string
            readOnly: true
            description: URL to the namespace.
      title:
        type: string
        description: >-
          The title of the resource. This is usually something that is meant to
          be displayed in a user interface.
      abstract:
        type: string
        description: >-
          A description of the resource. This is usually something that is meant
          to be displayed in a user interface.
      defaultInterpolationMethod:
        type: string
        description: >-
          Default resampling (interpolation) method that will be used for this
          coverage.
      keywords:
        type: object
        description: A collection of keywords associated with the resource.
        properties:
          string:
            type: array
            description: List of keyword values with internationalization and vocabulary
            items:
              type: string
              description: A single keyword value
      metadatalinks:
        type: object
        description: Wraps a collection of metadata links for the resource.
        properties:
          metadataLink:
            type: array
            description: A collection of metadata links for the resource.
            items:
              type: object
              properties:
                type:
                  type: string
                  description: The MIME type
                metadataType:
                  type: string
                  description: 'The type of metadata, e.g. "FGDC"'
                content:
                  type: string
                  description: The link URL
      dataLinks:
        type: object
        description: Wraps a collection of data links for the resource.
        properties:
          metadataLink:
            type: array
            description: A collection of data links for the resource.
            items:
              type: object
              properties:
                type:
                  type: string
                  description: The MIME type
                content:
                  type: string
                  description: The link URL
      nativeCRS:
        type: string
        description: The native coordinate reference system object of the resource.
      srs:
        type: string
        description: Returns the identifier of coordinate reference system of the resource.
      nativeBoundingBox:
        type: object
        description: Returns the bounds of the resource in its declared CRS.
        properties:
          minx:
            type: number
            description: The min x coordinate
          maxx:
            type: number
            description: The max x coordinate
          miny:
            type: number
            description: The min y coordinate
          maxy:
            type: number
            description: The max y coordinate
          crs:
            type: string
            description: The coordinate reference system object of the bounding box.
      latLonBoundingBox:
        type: object
        description: >-
          The bounds of the resource in lat / lon. This value represents a
          "fixed value" and is not calulated on the underlying dataset.
        properties:
          minx:
            type: number
            description: The min x coordinate
          maxx:
            type: number
            description: The max x coordinate
          miny:
            type: number
            description: The min y coordinate
          maxy:
            type: number
            description: The max y coordinate
          crs:
            type: string
            description: The coordinate reference system object of the bounding box.
      metadata:
        type: array
        description: A list of key/value metadata pairs.
        items:
          $ref: '#/definitions/MetadataEntry'
      store:
        type: object
        description: The store the resource is a part of.
        properties:
          '@class':
            type: string
            description: The class of the store
          name:
            type: string
            description: The name of the store
          href:
            type: string
            description: URL to the data store
      cqlFilter:
        type: string
        description: The ECQL string used as default feature type filter
      maxFeatures:
        type: integer
        description: >-
          A cap on the number of features that a query against this type can
          return.
      numDecimals:
        type: number
        description: >-
          The number of decimal places to use when encoding floating point
          numbers from data of this feature type.
      responseSRS:
        type: object
        description: >-
          The srs's that the WFS service will advertise in the capabilities
          document for this feature type (overriding the global WFS settings).
        properties:
          string:
            type: string
            description: The value of the srs
      overridingServiceSRS:
        type: boolean
        description: True if this feature type info is overriding the WFS global SRS list
      skipNumberMatched:
        type: boolean
        description: >-
          True if this feature type info is overriding the counting of
          numberMatched.
      circularArcPresent:
        type: boolean
      linearizationTolerance:
        type: number
        description: >-
          Tolerance used to linearize this feature type, as an absolute value
          expressed in the geometries own CRS
      attributes:
        type: object
        description: Wrapper for the derived set of attributes for the feature type.
        properties:
          attribute:
            type: array
            description: The derived set of attributes for the feature type.
            items:
              type: object
              description: A single attribute
              properties:
                name:
                  type: string
                  description: Name of the attribute.
                minOccurs:
                  type: integer
                  description: Minimum number of occurrences of the attribute.
                maxOccurs:
                  type: integer
                  description: Maximum number of occurrences of the attribute.
                nillable:
                  type: boolean
                  description: >-
                    Flag indicating if null is an acceptable value for the
                    attribute.
                binding:
                  type: string
                  description: The java class that values of this attribute are bound to.
                length:
                  type: integer
                  description: >-
                    Returns the length of this attribute. It's usually non null
                    only for string and numeric types"
      dimensions:
        type: object
        description: raster dimensions
        properties:
          coverageDimension:
            type: array
            items:
              type: object
              description: raster dimenion
              properties:
                description:
                  type: string
                  description: description of the raster dimension
                name:
                  type: string
                  description: name of the dimension
                range:
                  type: object
                  description: dimension range
                  properties:
                    max:
                      type: number
                      description: max range value
                    min:
                      type: number
                      description: min range value
      grid:
        type: object
        description: >-
          contains information about how to translate from the raster plan to a
          coordinate reference system
        properties:
          dimension:
            type: string
            description: cardinality of the raster plan
          crs:
            type: string
            description: target coordinate system
          range:
            type: object
            description: range of the raster plan
            properties:
              high:
                type: string
                description: max range values
              low:
                type: string
                description: min range values
          transform:
            type: object
            description: transformation definition
            properties:
              scaleX:
                type: number
                description: scale value to apply in X
              scaleY:
                type: number
                description: scale value to apply in Y
              shearX:
                type: number
                description: shear value to apply in X
              shearY:
                type: number
                description: shear value to apply in Y
              translateX:
                type: number
                description: translation to apply in X
              translatexY:
                type: number
                description: translation to apply in Y
          interpolationMethods:
            type: object
            description: available interporlations methods for this coverage
            properties:
              string:
                type: array
                items:
                  type: string
                  description: name of the interpolation method
    example:
      coverage:
        abstract: "Digital elevation model for the Spearfish region.\r\n\r\nsfdem is a Tagged Image File Format with Geographic information"
        defaultInterpolationMethod: nearest neighbor
        description: Generated from sfdem
        dimensions:
          coverageDimension:
            - description: 'GridSampleDimension[-9.999999933815813E36,-9.999999933815813E36]'
              name: GRAY_INDEX
              range:
                max: -9.999999933815813e+36
                min: -9.999999933815813e+36
        enabled: true
        grid:
          '@dimension': '2'
          crs: 'EPSG:26713'
          range:
            high: 634 477
            low: 0 0
          transform:
            scaleX: 30
            scaleY: -30
            shearX: 0
            shearY: 0
            translateX: 589995
            translateY: 4927995
        interpolationMethods:
          string:
            - nearest neighbor
            - bilinear
            - bicubic
        keywords:
          string:
            - WCS
            - sfdem
            - sfdem
            - type\@language=fr\;\@vocabulary=test\;
        latLonBoundingBox:
          crs: 'EPSG:4326'
          maxx: -103.62940739432703
          maxy: 44.5016011535299
          minx: -103.87108701853181
          miny: 44.370187074132616
        metadata:
          entry:
            - '@key': elevation
              dimensionInfo:
                enabled: false
            - $: '10'
              '@key': cacheAgeMax
            - '@key': time
              dimensionInfo:
                defaultValue: ''
                enabled: false
            - $: 'true'
              '@key': cachingEnabled
            - $: sfdem_sfdem
              '@key': dirName
        name: sfdem
        namespace:
          href: 'http://localhost:8075/geoserver/restng/namespaces/sf.json'
          name: sf
        nativeBoundingBox:
          crs:
            $: 'EPSG:26713'
            '@class': projected
          maxx: 609000
          maxy: 4928010
          minx: 589980
          miny: 4913700
        nativeCRS:
          $: |-
            PROJCS["NAD27 / UTM zone 13N", 
              GEOGCS["NAD27", 
                DATUM["North American Datum 1927", 
                  SPHEROID["Clarke 1866", 6378206.4, 294.9786982138982, AUTHORITY["EPSG","7008"]], 
                  TOWGS84[2.478, 149.752, 197.726, 0.526, -0.498, 0.501, 0.685], 
                  AUTHORITY["EPSG","6267"]], 
                PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
                UNIT["degree", 0.017453292519943295], 
                AXIS["Geodetic longitude", EAST], 
                AXIS["Geodetic latitude", NORTH], 
                AUTHORITY["EPSG","4267"]], 
              PROJECTION["Transverse_Mercator", AUTHORITY["EPSG","9807"]], 
              PARAMETER["central_meridian", -105.0], 
              PARAMETER["latitude_of_origin", 0.0], 
              PARAMETER["scale_factor", 0.9996], 
              PARAMETER["false_easting", 500000.0], 
              PARAMETER["false_northing", 0.0], 
              UNIT["m", 1.0], 
              AXIS["Easting", EAST], 
              AXIS["Northing", NORTH], 
              AUTHORITY["EPSG","26713"]]
          '@class': projected
        nativeFormat: GeoTIFF
        nativeName: sfdem
        requestSRS:
          string:
            - 'EPSG:26713'
        responseSRS:
          string:
            - 'EPSG:26713'
        srs: 'EPSG:26713'
        store:
          '@class': coverageStore
          href: >-
            http://localhost:8075/geoserver/restng/workspaces/sf/coveragestores/sfdem.json
          name: 'sf:sfdem'
        supportedFormats:
          string:
            - ARCGRID
            - IMAGEMOSAIC
            - GTOPO30
            - GEOTIFF
            - GIF
            - PNG
            - JPEG
            - TIFF
        title: Spearfish elevation
  MetadataEntry:
    type: object
    title: entry
    properties:
      '@key':
        title: key
        type: string
        enum:
          - regionateStrategy
          - regionateFeatureLimit
          - cacheAgeMax
          - cachingEnabled
          - regionateAttribute
          - indexingEnabled
          - dirName
        description: 'Key used for metadata entry, additional keys are added over time'
      $:
        title: text
        type: string
        description: >-
          Text value for provided key Valid text depends on key used. Example 
          {'@key'='cachingEnabled','$'='true'}.
  CoverageStoreInfo:
    type: object
    required:
      - name
      - type
    example: |
      <coverageStore>
        <name>arcGridSample</name>
        <description>Sample ASCII GRID coverage of Global rainfall.</description>
        <type>ArcGrid</type>
        <enabled>true</enabled>
        <workspace>
          <name>nurc</name>
          <atom:link xmlns:atom="http://www.w3.org/2005/Atom" rel="alternate" href="http://localhost:8080/geoserver/rest/workspaces/nurc.xml" type="application/xml"/>
        </workspace>
        <__default>false</__default>
        <url>file:coverages/arc_sample/precip30min.asc</url>
        <coverages>
          <atom:link xmlns:atom="http://www.w3.org/2005/Atom" rel="alternate" href="http://localhost:8080/geoserver/rest/workspaces/nurc/coveragestores/arcGridSample/coverages.xml" type="application/xml"/>
        </coverages>
      </coverageStore>      
    properties:
      name:
        type: string
        description: Name of the coverage store
      description:
        type: string
        description: Description of the coverage store
      type:
        type: string
        description: Type of coverage store
      enabled:
        type: boolean
        description: 'Whether the store is enabled, or not'
      workspace:
        type: object
        description: The workspace containing the store
        required:
          - name
        properties:
          name:
            type: string
            description: Name of the workspace
          link:
            type: string
            description: A link to the workspace representation
      __default__:
        type: boolean
        description: Whether the store is the default store of the workspace
      url:
        type: string
        description: >-
          Location of the raster data source (often, but not necessarily, a
          file). Can be relative to the data directory.
      coverages:
        type: object
        properties:
          link:
            type: string
            description: A link to the list of coverages contained in this store
  CoverageStoreListItem:
    type: object
    properties:
      name:
        type: string
        description: Name of coverage store
      href:
        type: string
        description: URL to coverage store definition
  CoverageStoreList:
    type: array
    items:
      $ref: '#/definitions/CoverageStoreListItem'
  FeatureTypeInfo:
    type: object
    properties:
      name:
        type: string
        description: >-
          The name of the resource. This name corresponds to the "published"
          name of the resource.
      nativeName:
        type: string
        description: >-
          The native name of the resource. This name corresponds to the physical
          resource that feature type is derived from -- a shapefile name, a
          database table, etc...
      namespace:
        type: object
        description: >-
          The namespace URI of the resource. Example would be an application
          schema namespace URI.
        properties:
          name:
            type: string
            description: The name of the namespace.
          href:
            type: string
            readOnly: true
            description: URL to the namespace.
      title:
        type: string
        description: >-
          The title of the resource. This is usually something that is meant to
          be displayed in a user interface.
      abstract:
        type: string
        description: >-
          A description of the resource. This is usually something that is meant
          to be displayed in a user interface.
      keywords:
        type: object
        description: A collection of keywords associated with the resource.
        properties:
          string:
            type: array
            description: List of keyword values with internationalization and vocabulary
            items:
              type: string
              description: A single keyword value
      metadatalinks:
        type: object
        description: Wraps a collection of metadata links for the resource.
        properties:
          metadataLink:
            type: array
            description: A collection of metadata links for the resource.
            items:
              type: object
              properties:
                type:
                  type: string
                  description: The MIME type
                metadataType:
                  type: string
                  description: 'The type of metadata, e.g. "FGDC"'
                content:
                  type: string
                  description: The link URL
      dataLinks:
        type: object
        description: Wraps a collection of data links for the resource.
        properties:
          metadataLink:
            type: array
            description: A collection of data links for the resource.
            items:
              type: object
              properties:
                type:
                  type: string
                  description: The MIME type
                content:
                  type: string
                  description: The link URL
      nativeCRS:
        type: string
        description: The native coordinate reference system object of the resource.
      srs:
        type: string
        description: Returns the identifier of coordinate reference system of the resource.
      nativeBoundingBox:
        type: object
        description: Returns the bounds of the resource in its declared CRS.
        properties:
          minx:
            type: number
            description: The min x coordinate
          maxx:
            type: number
            description: The max x coordinate
          miny:
            type: number
            description: The min y coordinate
          maxy:
            type: number
            description: The max y coordinate
          crs:
            type: string
            description: The coordinate reference system object of the bounding box.
      latLonBoundingBox:
        type: object
        description: >-
          The bounds of the resource in lat / lon. This value represents a
          "fixed value" and is not calculated on the underlying dataset.
        properties:
          minx:
            type: number
            description: The min x coordinate
          maxx:
            type: number
            description: The max x coordinate
          miny:
            type: number
            description: The min y coordinate
          maxy:
            type: number
            description: The max y coordinate
          crs:
            type: string
            description: The coordinate reference system object of the bounding box.
      metadata:
        type: array
        description: A list of key/value metadata pairs.
        items:
          $ref: '#/definitions/MetadataEntry'
      store:
        type: object
        description: The store the resource is a part of.
        properties:
          '@class':
            type: string
            description: The class of the store
          name:
            type: string
            description: The name of the store
          href:
            type: string
            description: URL to the data store
      cqlFilter:
        type: string
        description: The ECQL string used as default feature type filter
      maxFeatures:
        type: integer
        description: >-
          A cap on the number of features that a query against this type can
          return.
      numDecimals:
        type: number
        description: >-
          The number of decimal places to use when encoding floating point
          numbers from data of this feature type.
      responseSRS:
        type: object
        description: >-
          The srs's that the WFS service will advertise in the capabilities
          document for this feature type (overriding the global WFS settings).
        properties:
          string:
            type: string
            description: The value of the srs
      overridingServiceSRS:
        type: boolean
        description: True if this feature type info is overriding the WFS global SRS list
      skipNumberMatched:
        type: boolean
        description: >-
          True if this feature type info is overriding the counting of
          numberMatched.
      circularArcPresent:
        type: boolean
      linearizationTolerance:
        type: number
        description: >-
          Tolerance used to linearize this feature type, as an absolute value
          expressed in the geometries own CRS
      attributes:
        type: object
        description: Wrapper for the derived set of attributes for the feature type.
        properties:
          attribute:
            type: array
            description: The derived set of attributes for the feature type.
            items:
              type: object
              description: A single attribute
              properties:
                name:
                  type: string
                  description: Name of the attribute.
                minOccurs:
                  type: integer
                  description: Minimum number of occurrences of the attribute.
                maxOccurs:
                  type: integer
                  description: Maximum number of occurrences of the attribute.
                nillable:
                  type: boolean
                  description: >-
                    Flag indicating if null is an acceptable value for the
                    attribute.
                binding:
                  type: string
                  description: The java class that values of this attribute are bound to.
                length:
                  type: integer
                  description: >-
                    Returns the length of this attribute. It's usually non null
                    only for string and numeric types"
    example:
      name: poi
      nativeName: poi
      namespace:
        name: tiger
        href: 'http://localhost:8080/geoserver/rest/namespaces/tiger.json'
      title: Manhattan (NY) points of interest
      abstract: >-
        Points of interest in New York, New York (on Manhattan). One of the
        attributes contains the name of a file with a picture of the point of
        interest.
      keywords:
        string:
          - poi
          - Manhattan
          - DS_poi
          - points_of_interest
          - sampleKeyword\@language=ab\;
          - area of effect\@language=bg\;\@vocabulary=technical\;
          - ÐŸÑ€Ð¸Ð²ÐµÑ‚\@language=ru\;\@vocabulary=friendly\;
      metadataLinks:
        metadataLink:
          - type: text/plain
            metadataType: FGDC
            content: www.google.com
      dataLinks:
        org.geoserver.catalog.impl.DataLinkInfoImpl:
          - type: text/plain
            content: 'http://www.google.com'
      nativeCRS: |-
        GEOGCS["WGS 84", 
          DATUM["World Geodetic System 1984", 
            SPHEROID["WGS 84", 6378137.0, 298.257223563, AUTHORITY["EPSG","7030"]], 
            AUTHORITY["EPSG","6326"]], 
          PRIMEM["Greenwich", 0.0, AUTHORITY["EPSG","8901"]], 
          UNIT["degree", 0.017453292519943295], 
          AXIS["Geodetic longitude", EAST], 
          AXIS["Geodetic latitude", NORTH], 
          AUTHORITY["EPSG","4326"]]
      srs: 'EPSG:4326'
      nativeBoundingBox:
        minx: -74.0118315772888
        maxx: -74.00153046439813
        miny: 40.70754683896324
        maxy: 40.719885123828675
        crs: 'EPSG:4326'
      latLonBoundingBox:
        minx: -74.0118315772888
        maxx: -74.00857344353275
        miny: 40.70754683896324
        maxy: 40.711945649065406
        crs: 'EPSG:4326'
      projectionPolicy: REPROJECT_TO_DECLARED
      enabled: true
      metadata:
        entry:
          - '@key': kml.regionateStrategy
            $: external-sorting
          - '@key': kml.regionateFeatureLimit
            $: '15'
          - '@key': cacheAgeMax
            $: '3000'
          - '@key': cachingEnabled
            $: 'true'
          - '@key': kml.regionateAttribute
            $: NAME
          - '@key': indexingEnabled
            $: 'false'
          - '@key': dirName
            $: DS_poi_poi
      store:
        '@class': dataStore
        name: 'tiger:nyc'
        href: >-
          http://localhost:8080/geoserver/rest/workspaces/tiger/datastores/nyc.json
      cqlFilter: INCLUDE
      maxFeatures: 100
      numDecimals: 6
      responseSRS:
        string:
          - 4326
      overridingServiceSRS: true
      skipNumberMatched: true
      circularArcPresent: true
      linearizationTolerance: 10
      attributes:
        attribute:
          - name: the_geom
            minOccurs: 0
            maxOccurs: 1
            nillable: true
            binding: com.vividsolutions.jts.geom.Point
          - name: NAME
            minOccurs: 0
            maxOccurs: 1
            nillable: true
            binding: java.lang.String
            length: 6
          - name: THUMBNAIL
            minOccurs: 0
            maxOccurs: 1
            nillable: true
            binding: java.lang.String
            length: 20
          - name: MAINPAGE
            minOccurs: 0
            maxOccurs: 1
            nillable: true
            binding: java.lang.String
            length: 19
  FontListItem:
    type: object
    properties:
      entry:
        type: string
        description: Name of font
  FontList:
    type: array
    items:
      $ref: '#/definitions/FontListItem'
  LayergroupResponse:
    title: layerGroups
    type: object
    properties:
      layerGroups:
        $ref: "#/definitions/Layergroups"

  Layergroups:
    title: layerGroup
    type: object
    properties:
      name:
        type: string
        description: Name of layer group
      link:
        type: string
        description: URL to layer group definition

  Layergroup:
    title: layerGroup
    xml:
      name: layerGroup
    type: object
    properties:
      name:
        type: string
        description: Name of the layer group
      mode:
        type: string
        enum: 
        - SINGLE
        - NAMED
        - CONTAINER
        - EO
        description: Name of the layer group mode. Can be SINGLE, NAMED, CONTAINER, or EO.
      title:
        type: string
        description: Title of the layer group
      abstractTxt:
        type: string
        description: Abstract of the layer group
      workspace:
        type: object
        properties:
          name:
            type: string
            description: Name of workspace that contains the layer group. Will only exist when request includes workspace name (/workspaces/{workspace}/...).
      publishables:
        type: object
        description: Layers published by group (in draw order)
        properties:
          published:
            type: array
            description: Published layer 
            items:
              $ref: "#/definitions/LayergroupPublished"
      styles:
        type: object
        description: Styles used to render layers in group
        properties:
          style:
            description: Style to render layer, or empty to use default style.
            type: array
            items:
              $ref: "#/definitions/LayergroupStyle"
      metadataLinks:
        type: array
        items:
          $ref: "#/definitions/LayergroupMetadataLink"
      bounds:
        type: object
        properties:
          minx:
            type: number
            description: Minimum X value of bounds
          maxx:
            type: number
            description: Maximum X value of bounds
          miny:
            type: number
            description: Minimum Y value of bounds
          maxy:
            type: number
            description: Maximum Y value of bounds            
          crs:
            type: string
            description: CRS code, usually in the form EPSG:####
      keywords:
        type: object
        description: A collection of keywords associated with the resource.
        properties:
          keyword:
            type: array
            description: List of keyword values with internationalization and vocabulary
            items:
              type: string 
              description: A single keyword value

  LayergroupPublished:
    type: object
    title: layer
    properties:
      name:
        type: string
        description: Name of the comprising layer, or empty to indicate a style group defined by the corresponding style. 
      link:
        type: string
        description: URL to the comprising layer

  LayergroupStyle:
    title: style
    type: object
    description: Style to use to render layer
    properties:
      name:
        type: string
        description: Name of the style for the corresponding layer in the list, or empty to use the default style of the corresponding layer.
      link:
        type: string
        description: URL of the style for the corresponding layer in the list

  LayergroupMetadataLink:
    title: metadataLink
    type: object
    properties:
      type:
        type: string
        description: MIME type
      metadataType:
        type: string
        description: Metadata type. Can be ISO9115:2003, FGDC, TC211, 19139, or other.
      content:
        type: string
        description: URL of metadata link

